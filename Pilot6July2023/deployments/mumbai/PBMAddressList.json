{
  "address": "0x399a4B29FA1A2B9E81962D6815e66A7E527080cB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "Blacklist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "MerchantList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "addMerchantAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "blacklistAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isMerchant",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "removeMerchantAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "unBlacklistAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0daf0bfbf08c9df7c40def91ede2b5c470a2fc442e9566af215325d6eedbce63",
  "receipt": {
    "to": null,
    "from": "0x8CC4D23D8556Fdb5875F17b6d6D7149380F24D93",
    "contractAddress": "0x399a4B29FA1A2B9E81962D6815e66A7E527080cB",
    "transactionIndex": 5,
    "gasUsed": "553879",
    "logsBloom": "0x
    "blockHash": "0x587218117ba669c68bafa7ecfff46b18489dae8608ddc582ef37ee59910c2361",
    "transactionHash": "0x0daf0bfbf08c9df7c40def91ede2b5c470a2fc442e9566af215325d6eedbce63",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 37932694,
        "transactionHash": "0x0daf0bfbf08c9df7c40def91ede2b5c470a2fc442e9566af215325d6eedbce63",
        "address": "0x399a4B29FA1A2B9E81962D6815e66A7E527080cB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008cc4d23d8556fdb5875f17b6d6d7149380f24d93"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x587218117ba669c68bafa7ecfff46b18489dae8608ddc582ef37ee59910c2361"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 37932694,
        "transactionHash": "0x0daf0bfbf08c9df7c40def91ede2b5c470a2fc442e9566af215325d6eedbce63",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008cc4d23d8556fdb5875f17b6d6d7149380f24d93",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000038ac001fa38c5000000000000000000000000000000000000000000000000007237b8a886822a00000000000000000000000000000000000000000000121b064d35216dde64b6000000000000000000000000000000000000000000000000006eacf8a68c496500000000000000000000000000000000000000000000121b0650bfe16fd89d7b",
        "logIndex": 37,
        "blockHash": "0x587218117ba669c68bafa7ecfff46b18489dae8608ddc582ef37ee59910c2361"
      }
    ],
    "blockNumber": 37932694,
    "cumulativeGasUsed": "2039522",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "25634cfbe1fc43f6cfbac2337a44292a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"MerchantList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"addMerchantAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"blacklistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isMerchant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"removeMerchantAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"unBlacklistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMerchantAddresses(address[],string)\":{\"details\":\"See {IPBMAddressList-addMerchantAddresses}. Requirements: - caller must be owner\"},\"blacklistAddresses(address[],string)\":{\"details\":\"See {IPBMAddressList-blacklistAddresses}. Requirements: - caller must be owner\"},\"isBlacklisted(address)\":{\"details\":\"See {IPBMAddressList-isBlacklisted}.\"},\"isMerchant(address)\":{\"details\":\"See {IPBMAddressList-isMerchant}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeMerchantAddresses(address[],string)\":{\"details\":\"See {IPBMAddressList-removeMerchantAddresses}. Requirements: - caller must be owner\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unBlacklistAddresses(address[],string)\":{\"details\":\"See {IPBMAddressList-unBlacklistAddresses}. Requirements: - caller must be owner\"}},\"version\":1},\"userdoc\":{\"events\":{\"Blacklist(string,address[],string)\":{\"notice\":\"Event emitted when the Blacklist is edited\"},\"MerchantList(string,address[],string)\":{\"notice\":\"Event emitted when the Merchant List is edited\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PBMAddressList.sol\":\"PBMAddressList\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IPBMAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title PBM Address list Interface.\\n/// @notice The PBM address list stores and manages whitelisted merchants and blacklisted address for the PBMs\\ninterface IPBMAddressList {\\n    /// @notice Adds wallet addresses to the blacklist who are unable to receive the pbm tokens.\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function blacklistAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Removes wallet addresses from the blacklist who are  unable to receive the PBM tokens.\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function unBlacklistAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Checks if the address is one of the blacklisted addresses\\n    /// @param _address The address in query\\n    /// @return True if address is a blacklisted, else false\\n    function isBlacklisted(address _address) external returns (bool);\\n\\n    /// @notice Adds wallet addresses of merchants who are the only wallets able to receive the underlying ERC-20 tokens (whitelisting).\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function addMerchantAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Removes wallet addresses from the merchant addresses who are  able to receive the underlying ERC-20 tokens (un-whitelisting).\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function removeMerchantAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Checks if the address is one of the whitelisted merchant\\n    /// @param _address The address in query\\n    /// @return True if address is a merchant, else false\\n    function isMerchant(address _address) external returns (bool);\\n\\n    /// @notice Event emitted when the Merchant List is edited\\n    /// @param action Tags \\\"add\\\" or \\\"remove\\\" for action type\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    event MerchantList(string action, address[] addresses, string metadata);\\n\\n    /// @notice Event emitted when the Blacklist is edited\\n    /// @param action Tags \\\"add\\\" or \\\"remove\\\" for action type\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    event Blacklist(string action, address[] addresses, string metadata);\\n}\\n\",\"keccak256\":\"0x202f0e811466e23f41d70c09edb1bdb21fc797f56a30197861b68cefa4a369fc\",\"license\":\"MIT\"},\"contracts/PBMAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IPBMAddressList.sol\\\";\\n\\ncontract PBMAddressList is Ownable, IPBMAddressList {\\n    // list of merchants who are able to receive the underlying ERC-20 tokens\\n    mapping(address => bool) internal merchantList;\\n    // list of merchants who are unable to receive the PBM tokens\\n    mapping(address => bool) internal blacklistedAddresses;\\n\\n    /**\\n     * @dev See {IPBMAddressList-blacklistAddresses}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     */\\n    function blacklistAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            blacklistedAddresses[addresses[i]] = true;\\n        }\\n        emit Blacklist(\\\"add\\\", addresses, metadata);\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-unBlacklistAddresses}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     */\\n    function unBlacklistAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            blacklistedAddresses[addresses[i]] = false;\\n        }\\n        emit Blacklist(\\\"remove\\\", addresses, metadata);\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-isBlacklisted}.\\n     *\\n     */\\n    function isBlacklisted(address _address) external view override returns (bool) {\\n        return blacklistedAddresses[_address];\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-addMerchantAddresses}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     */\\n    function addMerchantAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            merchantList[addresses[i]] = true;\\n        }\\n        emit MerchantList(\\\"add\\\", addresses, metadata);\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-removeMerchantAddresses}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     */\\n    function removeMerchantAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            merchantList[addresses[i]] = false;\\n        }\\n        emit MerchantList(\\\"remove\\\", addresses, metadata);\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-isMerchant}.\\n     *\\n     */\\n    function isMerchant(address _address) external view override returns (bool) {\\n        return merchantList[_address];\\n    }\\n}\\n\",\"keccak256\":\"0x2c319b1f8aa7e1b66ef8bfeee3292c768e15c13028f9e8d443cc2642f4533ede\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61089a8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146101095780639e662bf214610124578063d99940e614610137578063f2fde38b1461014a578063fe575a871461015d57600080fd5b8063194ef60b146100985780631a2f7167146100ad578063380518e9146100ee578063715018a614610101575b600080fd5b6100ab6100a636600461062b565b610189565b005b6100d96100bb3660046106fa565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100ab6100fc36600461062b565b610237565b6100ab6102d9565b6000546040516001600160a01b0390911681526020016100e5565b6100ab61013236600461062b565b6102ed565b6100ab61014536600461062b565b61038e565b6100ab6101583660046106fa565b610430565b6100d961016b3660046106fa565b6001600160a01b031660009081526002602052604090205460ff1690565b6101916104ae565b60005b82518110156101f9576001600260008584815181106101b5576101b561071c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806101f181610732565b915050610194565b507ffd601646bc86d816d9448e5951578f6b37509d32182b7d514dac8c544bcde82a828260405161022b9291906107ec565b60405180910390a15050565b61023f6104ae565b60005b82518110156102a7576000600260008584815181106102635761026361071c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061029f81610732565b915050610242565b507ffd601646bc86d816d9448e5951578f6b37509d32182b7d514dac8c544bcde82a828260405161022b929190610834565b6102e16104ae565b6102eb6000610508565b565b6102f56104ae565b60005b825181101561035c5760018060008584815181106103185761031861071c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061035481610732565b9150506102f8565b507f255c7bb3f43b415fcde5cc3fd6b38794d983721f30b0a924ab3db736c38c4573828260405161022b9291906107ec565b6103966104ae565b60005b82518110156103fe576000600160008584815181106103ba576103ba61071c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806103f681610732565b915050610399565b507f255c7bb3f43b415fcde5cc3fd6b38794d983721f30b0a924ab3db736c38c4573828260405161022b929190610834565b6104386104ae565b6001600160a01b0381166104a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6104ab81610508565b50565b6000546001600160a01b031633146102eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610499565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561059757610597610558565b604052919050565b80356001600160a01b03811681146105b657600080fd5b919050565b600082601f8301126105cc57600080fd5b813567ffffffffffffffff8111156105e6576105e6610558565b6105f9601f8201601f191660200161056e565b81815284602083860101111561060e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561063e57600080fd5b823567ffffffffffffffff8082111561065657600080fd5b818501915085601f83011261066a57600080fd5b813560208282111561067e5761067e610558565b8160051b61068d82820161056e565b928352848101820192828101908a8511156106a757600080fd5b958301955b848710156106cc576106bd8761059f565b825295830195908301906106ac565b97505050860135925050808211156106e357600080fd5b506106f0858286016105bb565b9150509250929050565b60006020828403121561070c57600080fd5b6107158261059f565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561075457634e487b7160e01b600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b838110156107945781516001600160a01b03168752958201959082019060010161076f565b509495945050505050565b6000815180845260005b818110156107c5576020818501810151868301820152016107a9565b818111156107d7576000602083870101525b50601f01601f19169290920160200192915050565b60608152600360608201526218591960ea1b608082015260a06020820152600061081960a083018561075b565b828103604084015261082b818561079f565b95945050505050565b60608152600660608201526572656d6f766560d01b608082015260a06020820152600061081960a083018561075b56fea2646970667358221220dea8937d9463abf43e3619d49b66f3f3da0d483fc89802bef4f3b1bd38e13e3264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146101095780639e662bf214610124578063d99940e614610137578063f2fde38b1461014a578063fe575a871461015d57600080fd5b8063194ef60b146100985780631a2f7167146100ad578063380518e9146100ee578063715018a614610101575b600080fd5b6100ab6100a636600461062b565b610189565b005b6100d96100bb3660046106fa565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100ab6100fc36600461062b565b610237565b6100ab6102d9565b6000546040516001600160a01b0390911681526020016100e5565b6100ab61013236600461062b565b6102ed565b6100ab61014536600461062b565b61038e565b6100ab6101583660046106fa565b610430565b6100d961016b3660046106fa565b6001600160a01b031660009081526002602052604090205460ff1690565b6101916104ae565b60005b82518110156101f9576001600260008584815181106101b5576101b561071c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806101f181610732565b915050610194565b507ffd601646bc86d816d9448e5951578f6b37509d32182b7d514dac8c544bcde82a828260405161022b9291906107ec565b60405180910390a15050565b61023f6104ae565b60005b82518110156102a7576000600260008584815181106102635761026361071c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061029f81610732565b915050610242565b507ffd601646bc86d816d9448e5951578f6b37509d32182b7d514dac8c544bcde82a828260405161022b929190610834565b6102e16104ae565b6102eb6000610508565b565b6102f56104ae565b60005b825181101561035c5760018060008584815181106103185761031861071c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061035481610732565b9150506102f8565b507f255c7bb3f43b415fcde5cc3fd6b38794d983721f30b0a924ab3db736c38c4573828260405161022b9291906107ec565b6103966104ae565b60005b82518110156103fe576000600160008584815181106103ba576103ba61071c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806103f681610732565b915050610399565b507f255c7bb3f43b415fcde5cc3fd6b38794d983721f30b0a924ab3db736c38c4573828260405161022b929190610834565b6104386104ae565b6001600160a01b0381166104a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6104ab81610508565b50565b6000546001600160a01b031633146102eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610499565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561059757610597610558565b604052919050565b80356001600160a01b03811681146105b657600080fd5b919050565b600082601f8301126105cc57600080fd5b813567ffffffffffffffff8111156105e6576105e6610558565b6105f9601f8201601f191660200161056e565b81815284602083860101111561060e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561063e57600080fd5b823567ffffffffffffffff8082111561065657600080fd5b818501915085601f83011261066a57600080fd5b813560208282111561067e5761067e610558565b8160051b61068d82820161056e565b928352848101820192828101908a8511156106a757600080fd5b958301955b848710156106cc576106bd8761059f565b825295830195908301906106ac565b97505050860135925050808211156106e357600080fd5b506106f0858286016105bb565b9150509250929050565b60006020828403121561070c57600080fd5b6107158261059f565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561075457634e487b7160e01b600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b838110156107945781516001600160a01b03168752958201959082019060010161076f565b509495945050505050565b6000815180845260005b818110156107c5576020818501810151868301820152016107a9565b818111156107d7576000602083870101525b50601f01601f19169290920160200192915050565b60608152600360608201526218591960ea1b608082015260a06020820152600061081960a083018561075b565b828103604084015261082b818561079f565b95945050505050565b60608152600660608201526572656d6f766560d01b608082015260a06020820152600061081960a083018561075b56fea2646970667358221220dea8937d9463abf43e3619d49b66f3f3da0d483fc89802bef4f3b1bd38e13e3264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMerchantAddresses(address[],string)": {
        "details": "See {IPBMAddressList-addMerchantAddresses}. Requirements: - caller must be owner"
      },
      "blacklistAddresses(address[],string)": {
        "details": "See {IPBMAddressList-blacklistAddresses}. Requirements: - caller must be owner"
      },
      "isBlacklisted(address)": {
        "details": "See {IPBMAddressList-isBlacklisted}."
      },
      "isMerchant(address)": {
        "details": "See {IPBMAddressList-isMerchant}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeMerchantAddresses(address[],string)": {
        "details": "See {IPBMAddressList-removeMerchantAddresses}. Requirements: - caller must be owner"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unBlacklistAddresses(address[],string)": {
        "details": "See {IPBMAddressList-unBlacklistAddresses}. Requirements: - caller must be owner"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Blacklist(string,address[],string)": {
        "notice": "Event emitted when the Blacklist is edited"
      },
      "MerchantList(string,address[],string)": {
        "notice": "Event emitted when the Merchant List is edited"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PBMAddressList.sol:PBMAddressList",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5161,
        "contract": "contracts/PBMAddressList.sol:PBMAddressList",
        "label": "merchantList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5165,
        "contract": "contracts/PBMAddressList.sol:PBMAddressList",
        "label": "blacklistedAddresses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}