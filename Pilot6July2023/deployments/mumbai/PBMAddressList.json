{
  "address": "0x25Ff780bc5549Fa65e2a94c06E8c1C8EE858D37b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "Blacklist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "MerchantList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "token_ids",
          "type": "uint256[]"
        }
      ],
      "name": "addHeroMerchant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "addMerchantAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "blacklistAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getHeroNFTId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isMerchant",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "removeHeroMerchant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "removeMerchantAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "unBlacklistAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x044af5a6edb9452a84510d5f437cfb0eb07ecd286f4f8e115c94e975c104b366",
  "receipt": {
    "to": null,
    "from": "0x8CC4D23D8556Fdb5875F17b6d6D7149380F24D93",
    "contractAddress": "0x25Ff780bc5549Fa65e2a94c06E8c1C8EE858D37b",
    "transactionIndex": 4,
    "gasUsed": "716582",
    "logsBloom": "0x
    "blockHash": "0x712a0318410e5851ff34aa0e5858d437567505fce733166c38b09d527d1922ef",
    "transactionHash": "0x044af5a6edb9452a84510d5f437cfb0eb07ecd286f4f8e115c94e975c104b366",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 38050129,
        "transactionHash": "0x044af5a6edb9452a84510d5f437cfb0eb07ecd286f4f8e115c94e975c104b366",
        "address": "0x25Ff780bc5549Fa65e2a94c06E8c1C8EE858D37b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008cc4d23d8556fdb5875f17b6d6d7149380f24d93"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x712a0318410e5851ff34aa0e5858d437567505fce733166c38b09d527d1922ef"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 38050129,
        "transactionHash": "0x044af5a6edb9452a84510d5f437cfb0eb07ecd286f4f8e115c94e975c104b366",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008cc4d23d8556fdb5875f17b6d6d7149380f24d93",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003d1975f62e9260000000000000000000000000000000000000000000000000dd1650b1c269cca000000000000000000000000000000000000000000000ce83fa8a914358b77170000000000000000000000000000000000000000000000000dcd9373bcc3b3a4000000000000000000000000000000000000000000000ce83fac7aab94ee603d",
        "logIndex": 16,
        "blockHash": "0x712a0318410e5851ff34aa0e5858d437567505fce733166c38b09d527d1922ef"
      }
    ],
    "blockNumber": 38050129,
    "cumulativeGasUsed": "1056262",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9cee09bc277ac09b5462dab7e8d00204",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"MerchantList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"token_ids\",\"type\":\"uint256[]\"}],\"name\":\"addHeroMerchant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"addMerchantAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"blacklistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getHeroNFTId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isMerchant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"removeHeroMerchant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"removeMerchantAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"unBlacklistAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addHeroMerchant(address[],uint256[])\":{\"details\":\"See {IPBMAddressList-addHeroMerchant}. Requirements: - caller must be owner\"},\"addMerchantAddresses(address[],string)\":{\"details\":\"See {IPBMAddressList-addMerchantAddresses}. Requirements: - caller must be owner\"},\"blacklistAddresses(address[],string)\":{\"details\":\"See {IPBMAddressList-blacklistAddresses}. Requirements: - caller must be owner\"},\"getHeroNFTId(address)\":{\"details\":\"See {IPBMAddressList-getHeroNFTId}.\"},\"isBlacklisted(address)\":{\"details\":\"See {IPBMAddressList-isBlacklisted}.\"},\"isMerchant(address)\":{\"details\":\"See {IPBMAddressList-isMerchant}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeHeroMerchant(address[])\":{\"details\":\"See {IPBMAddressList-removeHeroMerchant}. Requirements: - caller must be owner\"},\"removeMerchantAddresses(address[],string)\":{\"details\":\"See {IPBMAddressList-removeMerchantAddresses}. Requirements: - caller must be owner\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unBlacklistAddresses(address[],string)\":{\"details\":\"See {IPBMAddressList-unBlacklistAddresses}. Requirements: - caller must be owner\"}},\"version\":1},\"userdoc\":{\"events\":{\"Blacklist(string,address[],string)\":{\"notice\":\"Event emitted when the Blacklist is edited\"},\"MerchantList(string,address[],string)\":{\"notice\":\"Event emitted when the Merchant List is edited\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PBMAddressList.sol\":\"PBMAddressList\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IPBMAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title PBM Address list Interface.\\n/// @notice The PBM address list stores and manages whitelisted merchants and blacklisted address for the PBMs\\ninterface IPBMAddressList {\\n    /// @notice Adds wallet addresses to the blacklist who are unable to receive the pbm tokens.\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function blacklistAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Removes wallet addresses from the blacklist who are  unable to receive the PBM tokens.\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function unBlacklistAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Checks if the address is one of the blacklisted addresses\\n    /// @param _address The address in query\\n    /// @return True if address is a blacklisted, else false\\n    function isBlacklisted(address _address) external returns (bool);\\n\\n    /// @notice Adds wallet addresses of merchants who are the only wallets able to receive the underlying ERC-20 tokens (whitelisting).\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function addMerchantAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Removes wallet addresses from the merchant addresses who are  able to receive the underlying ERC-20 tokens (un-whitelisting).\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function removeMerchantAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Checks if the address is one of the whitelisted merchant\\n    /// @param _address The address in query\\n    /// @return True if address is a merchant, else false\\n    function isMerchant(address _address) external returns (bool);\\n\\n    /// @notice Adds wallet addresses of merchants who are hero merchants.\\n    /// @param addresses The list of hero merchant wallet address\\n    /// @param token_ids The list of heroNFT token_id\\n    function addHeroMerchant(address[] memory addresses, uint256[] memory token_ids) external;\\n\\n    /// @notice Removes wallet addresses of merchants who are hero merchants.\\n    /// @param addresses The list of hero merchant wallet address\\n    function removeHeroMerchant(address[] memory addresses) external;\\n\\n    /// @notice Get the heroNFT token_id\\n    /// @param _address The address in query\\n    /// @return 0 if not a hero merchant, else the heroNFT token_id\\n    function getHeroNFTId(address _address) external returns (uint256);\\n\\n    /// @notice Event emitted when the Merchant List is edited\\n    /// @param action Tags \\\"add\\\" or \\\"remove\\\" for action type\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    event MerchantList(string action, address[] addresses, string metadata);\\n\\n    /// @notice Event emitted when the Blacklist is edited\\n    /// @param action Tags \\\"add\\\" or \\\"remove\\\" for action type\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    event Blacklist(string action, address[] addresses, string metadata);\\n}\\n\",\"keccak256\":\"0xd6fc1b53a7f8d435dc0a3c56b595d48fad3e9305e77b1fdf12ead0f2fc7e8680\",\"license\":\"MIT\"},\"contracts/PBMAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./IPBMAddressList.sol\\\";\\n\\ncontract PBMAddressList is Ownable, IPBMAddressList {\\n    // list of merchants who are able to receive the underlying ERC-20 tokens\\n    mapping(address => bool) internal merchantList;\\n    // list of merchants who are unable to receive the PBM tokens\\n    mapping(address => bool) internal blacklistedAddresses;\\n    // mapping of hero merchant address to hero nft id\\n    mapping(address => uint256) internal heroNFTId;\\n\\n    /**\\n     * @dev See {IPBMAddressList-blacklistAddresses}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     */\\n    function blacklistAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            blacklistedAddresses[addresses[i]] = true;\\n        }\\n        emit Blacklist(\\\"add\\\", addresses, metadata);\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-unBlacklistAddresses}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     */\\n    function unBlacklistAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            blacklistedAddresses[addresses[i]] = false;\\n        }\\n        emit Blacklist(\\\"remove\\\", addresses, metadata);\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-isBlacklisted}.\\n     *\\n     */\\n    function isBlacklisted(address _address) external view override returns (bool) {\\n        return blacklistedAddresses[_address];\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-addMerchantAddresses}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     */\\n    function addMerchantAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            merchantList[addresses[i]] = true;\\n        }\\n        emit MerchantList(\\\"add\\\", addresses, metadata);\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-removeMerchantAddresses}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     */\\n    function removeMerchantAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            merchantList[addresses[i]] = false;\\n        }\\n        emit MerchantList(\\\"remove\\\", addresses, metadata);\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-isMerchant}.\\n     *\\n     */\\n    function isMerchant(address _address) external view override returns (bool) {\\n        return merchantList[_address];\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-addHeroMerchant}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     */\\n    function addHeroMerchant(address[] memory addresses, uint256[] memory token_ids) external override onlyOwner {\\n        require(addresses.length == token_ids.length, \\\"PBMAddressList: addresses and token_ids length mismatch\\\");\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            heroNFTId[addresses[i]] = token_ids[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-removeHeroMerchant}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     */\\n    function removeHeroMerchant(address[] memory addresses) external override onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            heroNFTId[addresses[i]] = 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IPBMAddressList-getHeroNFTId}.\\n     *\\n     */\\n    function getHeroNFTId(address _address) external view override returns (uint256) {\\n        return heroNFTId[_address];\\n    }\\n}\\n\",\"keccak256\":\"0xbf0ff9b8a2fa34ce48acf5e342418bf240079f4d307c6c890f81258b6b3434eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b8c8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639e662bf2116100715780639e662bf21461017c578063ad53e9361461018f578063b2f53910146101a2578063d99940e6146101b5578063f2fde38b146101c8578063fe575a87146101db57600080fd5b8063194ef60b146100b95780631a2f7167146100ce57806331c332211461010f578063380518e914610146578063715018a6146101595780638da5cb5b14610161575b600080fd5b6100cc6100c736600461083d565b610207565b005b6100fa6100dc3660046108f4565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61013861011d3660046108f4565b6001600160a01b031660009081526003602052604090205490565b604051908152602001610106565b6100cc61015436600461083d565b6102b5565b6100cc610357565b6000546040516001600160a01b039091168152602001610106565b6100cc61018a36600461083d565b61036b565b6100cc61019d366004610916565b61040c565b6100cc6101b03660046109d1565b610510565b6100cc6101c336600461083d565b61057f565b6100cc6101d63660046108f4565b610621565b6100fa6101e93660046108f4565b6001600160a01b031660009081526002602052604090205460ff1690565b61020f61069a565b60005b82518110156102775760016002600085848151811061023357610233610a0e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061026f81610a24565b915050610212565b507ffd601646bc86d816d9448e5951578f6b37509d32182b7d514dac8c544bcde82a82826040516102a9929190610ade565b60405180910390a15050565b6102bd61069a565b60005b8251811015610325576000600260008584815181106102e1576102e1610a0e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061031d81610a24565b9150506102c0565b507ffd601646bc86d816d9448e5951578f6b37509d32182b7d514dac8c544bcde82a82826040516102a9929190610b26565b61035f61069a565b61036960006106f4565b565b61037361069a565b60005b82518110156103da57600180600085848151811061039657610396610a0e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806103d281610a24565b915050610376565b507f255c7bb3f43b415fcde5cc3fd6b38794d983721f30b0a924ab3db736c38c457382826040516102a9929190610ade565b61041461069a565b80518251146104905760405162461bcd60e51b815260206004820152603760248201527f50424d416464726573734c6973743a2061646472657373657320616e6420746f60448201527f6b656e5f696473206c656e677468206d69736d6174636800000000000000000060648201526084015b60405180910390fd5b60005b825181101561050b578181815181106104ae576104ae610a0e565b6020026020010151600360008584815181106104cc576104cc610a0e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061050390610a24565b915050610493565b505050565b61051861069a565b60005b815181101561057b5760006003600084848151811061053c5761053c610a0e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061057390610a24565b91505061051b565b5050565b61058761069a565b60005b82518110156105ef576000600160008584815181106105ab576105ab610a0e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806105e781610a24565b91505061058a565b507f255c7bb3f43b415fcde5cc3fd6b38794d983721f30b0a924ab3db736c38c457382826040516102a9929190610b26565b61062961069a565b6001600160a01b03811661068e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610487565b610697816106f4565b50565b6000546001600160a01b031633146103695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610487565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561078357610783610744565b604052919050565b600067ffffffffffffffff8211156107a5576107a5610744565b5060051b60200190565b80356001600160a01b03811681146107c657600080fd5b919050565b600082601f8301126107dc57600080fd5b813560206107f16107ec8361078b565b61075a565b82815260059290921b8401810191818101908684111561081057600080fd5b8286015b8481101561083257610825816107af565b8352918301918301610814565b509695505050505050565b6000806040838503121561085057600080fd5b823567ffffffffffffffff8082111561086857600080fd5b610874868387016107cb565b935060209150818501358181111561088b57600080fd5b8501601f8101871361089c57600080fd5b8035828111156108ae576108ae610744565b6108c0601f8201601f1916850161075a565b925080835287848284010111156108d657600080fd5b80848301858501376000848285010152505080925050509250929050565b60006020828403121561090657600080fd5b61090f826107af565b9392505050565b6000806040838503121561092957600080fd5b823567ffffffffffffffff8082111561094157600080fd5b61094d868387016107cb565b935060209150818501358181111561096457600080fd5b85019050601f8101861361097757600080fd5b80356109856107ec8261078b565b81815260059190911b820183019083810190888311156109a457600080fd5b928401925b828410156109c2578335825292840192908401906109a9565b80955050505050509250929050565b6000602082840312156109e357600080fd5b813567ffffffffffffffff8111156109fa57600080fd5b610a06848285016107cb565b949350505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610a4657634e487b7160e01b600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b83811015610a865781516001600160a01b031687529582019590820190600101610a61565b509495945050505050565b6000815180845260005b81811015610ab757602081850181015186830182015201610a9b565b81811115610ac9576000602083870101525b50601f01601f19169290920160200192915050565b60608152600360608201526218591960ea1b608082015260a060208201526000610b0b60a0830185610a4d565b8281036040840152610b1d8185610a91565b95945050505050565b60608152600660608201526572656d6f766560d01b608082015260a060208201526000610b0b60a0830185610a4d56fea2646970667358221220f1978a35b48bf7287ce3a9d5cad8f3ce48b5049ef0153f27247aedc2fa65bb3464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80639e662bf2116100715780639e662bf21461017c578063ad53e9361461018f578063b2f53910146101a2578063d99940e6146101b5578063f2fde38b146101c8578063fe575a87146101db57600080fd5b8063194ef60b146100b95780631a2f7167146100ce57806331c332211461010f578063380518e914610146578063715018a6146101595780638da5cb5b14610161575b600080fd5b6100cc6100c736600461083d565b610207565b005b6100fa6100dc3660046108f4565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61013861011d3660046108f4565b6001600160a01b031660009081526003602052604090205490565b604051908152602001610106565b6100cc61015436600461083d565b6102b5565b6100cc610357565b6000546040516001600160a01b039091168152602001610106565b6100cc61018a36600461083d565b61036b565b6100cc61019d366004610916565b61040c565b6100cc6101b03660046109d1565b610510565b6100cc6101c336600461083d565b61057f565b6100cc6101d63660046108f4565b610621565b6100fa6101e93660046108f4565b6001600160a01b031660009081526002602052604090205460ff1690565b61020f61069a565b60005b82518110156102775760016002600085848151811061023357610233610a0e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061026f81610a24565b915050610212565b507ffd601646bc86d816d9448e5951578f6b37509d32182b7d514dac8c544bcde82a82826040516102a9929190610ade565b60405180910390a15050565b6102bd61069a565b60005b8251811015610325576000600260008584815181106102e1576102e1610a0e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061031d81610a24565b9150506102c0565b507ffd601646bc86d816d9448e5951578f6b37509d32182b7d514dac8c544bcde82a82826040516102a9929190610b26565b61035f61069a565b61036960006106f4565b565b61037361069a565b60005b82518110156103da57600180600085848151811061039657610396610a0e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806103d281610a24565b915050610376565b507f255c7bb3f43b415fcde5cc3fd6b38794d983721f30b0a924ab3db736c38c457382826040516102a9929190610ade565b61041461069a565b80518251146104905760405162461bcd60e51b815260206004820152603760248201527f50424d416464726573734c6973743a2061646472657373657320616e6420746f60448201527f6b656e5f696473206c656e677468206d69736d6174636800000000000000000060648201526084015b60405180910390fd5b60005b825181101561050b578181815181106104ae576104ae610a0e565b6020026020010151600360008584815181106104cc576104cc610a0e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061050390610a24565b915050610493565b505050565b61051861069a565b60005b815181101561057b5760006003600084848151811061053c5761053c610a0e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550808061057390610a24565b91505061051b565b5050565b61058761069a565b60005b82518110156105ef576000600160008584815181106105ab576105ab610a0e565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806105e781610a24565b91505061058a565b507f255c7bb3f43b415fcde5cc3fd6b38794d983721f30b0a924ab3db736c38c457382826040516102a9929190610b26565b61062961069a565b6001600160a01b03811661068e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610487565b610697816106f4565b50565b6000546001600160a01b031633146103695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610487565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561078357610783610744565b604052919050565b600067ffffffffffffffff8211156107a5576107a5610744565b5060051b60200190565b80356001600160a01b03811681146107c657600080fd5b919050565b600082601f8301126107dc57600080fd5b813560206107f16107ec8361078b565b61075a565b82815260059290921b8401810191818101908684111561081057600080fd5b8286015b8481101561083257610825816107af565b8352918301918301610814565b509695505050505050565b6000806040838503121561085057600080fd5b823567ffffffffffffffff8082111561086857600080fd5b610874868387016107cb565b935060209150818501358181111561088b57600080fd5b8501601f8101871361089c57600080fd5b8035828111156108ae576108ae610744565b6108c0601f8201601f1916850161075a565b925080835287848284010111156108d657600080fd5b80848301858501376000848285010152505080925050509250929050565b60006020828403121561090657600080fd5b61090f826107af565b9392505050565b6000806040838503121561092957600080fd5b823567ffffffffffffffff8082111561094157600080fd5b61094d868387016107cb565b935060209150818501358181111561096457600080fd5b85019050601f8101861361097757600080fd5b80356109856107ec8261078b565b81815260059190911b820183019083810190888311156109a457600080fd5b928401925b828410156109c2578335825292840192908401906109a9565b80955050505050509250929050565b6000602082840312156109e357600080fd5b813567ffffffffffffffff8111156109fa57600080fd5b610a06848285016107cb565b949350505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610a4657634e487b7160e01b600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b83811015610a865781516001600160a01b031687529582019590820190600101610a61565b509495945050505050565b6000815180845260005b81811015610ab757602081850181015186830182015201610a9b565b81811115610ac9576000602083870101525b50601f01601f19169290920160200192915050565b60608152600360608201526218591960ea1b608082015260a060208201526000610b0b60a0830185610a4d565b8281036040840152610b1d8185610a91565b95945050505050565b60608152600660608201526572656d6f766560d01b608082015260a060208201526000610b0b60a0830185610a4d56fea2646970667358221220f1978a35b48bf7287ce3a9d5cad8f3ce48b5049ef0153f27247aedc2fa65bb3464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addHeroMerchant(address[],uint256[])": {
        "details": "See {IPBMAddressList-addHeroMerchant}. Requirements: - caller must be owner"
      },
      "addMerchantAddresses(address[],string)": {
        "details": "See {IPBMAddressList-addMerchantAddresses}. Requirements: - caller must be owner"
      },
      "blacklistAddresses(address[],string)": {
        "details": "See {IPBMAddressList-blacklistAddresses}. Requirements: - caller must be owner"
      },
      "getHeroNFTId(address)": {
        "details": "See {IPBMAddressList-getHeroNFTId}."
      },
      "isBlacklisted(address)": {
        "details": "See {IPBMAddressList-isBlacklisted}."
      },
      "isMerchant(address)": {
        "details": "See {IPBMAddressList-isMerchant}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeHeroMerchant(address[])": {
        "details": "See {IPBMAddressList-removeHeroMerchant}. Requirements: - caller must be owner"
      },
      "removeMerchantAddresses(address[],string)": {
        "details": "See {IPBMAddressList-removeMerchantAddresses}. Requirements: - caller must be owner"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unBlacklistAddresses(address[],string)": {
        "details": "See {IPBMAddressList-unBlacklistAddresses}. Requirements: - caller must be owner"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Blacklist(string,address[],string)": {
        "notice": "Event emitted when the Blacklist is edited"
      },
      "MerchantList(string,address[],string)": {
        "notice": "Event emitted when the Merchant List is edited"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PBMAddressList.sol:PBMAddressList",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 247,
        "contract": "contracts/PBMAddressList.sol:PBMAddressList",
        "label": "merchantList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 251,
        "contract": "contracts/PBMAddressList.sol:PBMAddressList",
        "label": "blacklistedAddresses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 255,
        "contract": "contracts/PBMAddressList.sol:PBMAddressList",
        "label": "heroNFTId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}