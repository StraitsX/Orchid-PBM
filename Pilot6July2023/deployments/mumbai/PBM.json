{
  "address": "0x78DC0Afb8d934AB72C4C70845ff86589633B2856",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ERC20Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ERC20TokenValue",
          "type": "uint256"
        }
      ],
      "name": "MerchantPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "PBMTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ERC20Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ERC20TokenValue",
          "type": "uint256"
        }
      ],
      "name": "PBMrevokeWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "companyName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "spotAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenExpiry",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "postExpiryURI",
          "type": "string"
        }
      ],
      "name": "createPBMTokenType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spotToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pbmAddressList",
          "type": "address"
        }
      ],
      "name": "initialise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pbmAddressList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pbmTokenManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "revokePBM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spotToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ac82e749d677f4181126dfd1f46974b7d800100aa2c0005e74b55e1bd44be25",
  "receipt": {
    "to": null,
    "from": "0x8CC4D23D8556Fdb5875F17b6d6D7149380F24D93",
    "contractAddress": "0x78DC0Afb8d934AB72C4C70845ff86589633B2856",
    "transactionIndex": 2,
    "gasUsed": "4110843",
    "logsBloom": "0x00000000000000000000000000000000004000000000000000800000000000000000000008000000000000000000000000008000002000000000000000000000000000000000000000000000000000800001000000000000040100402000000000000000020000000000000000000800000000000000000080000000000000400000000020000000000000000000000000000000000000000000001000000000200000000000000000000000000000000000000000000000000040004000004080000000000000000001000000000000000000000000000000100000000020000000000000001000000000800000000200000000000000000000000000100000",
    "blockHash": "0x909dadab02a016c0a5f44aab458ac8975b166f3ddb1437e0e10233b0f8bb88d8",
    "transactionHash": "0x2ac82e749d677f4181126dfd1f46974b7d800100aa2c0005e74b55e1bd44be25",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 37932698,
        "transactionHash": "0x2ac82e749d677f4181126dfd1f46974b7d800100aa2c0005e74b55e1bd44be25",
        "address": "0x78DC0Afb8d934AB72C4C70845ff86589633B2856",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008cc4d23d8556fdb5875f17b6d6d7149380f24d93"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x909dadab02a016c0a5f44aab458ac8975b166f3ddb1437e0e10233b0f8bb88d8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 37932698,
        "transactionHash": "0x2ac82e749d677f4181126dfd1f46974b7d800100aa2c0005e74b55e1bd44be25",
        "address": "0x6334459C416720Fc83DcC5F1d3635cb1E2951Db8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000078dc0afb8d934ab72c4c70845ff86589633b2856"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x909dadab02a016c0a5f44aab458ac8975b166f3ddb1437e0e10233b0f8bb88d8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 37932698,
        "transactionHash": "0x2ac82e749d677f4181126dfd1f46974b7d800100aa2c0005e74b55e1bd44be25",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008cc4d23d8556fdb5875f17b6d6d7149380f24d93",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001b715dcc146050000000000000000000000000000000000000000000000000006eacf8a6050ff500000000000000000000000000000000000000000000121b06a0278dfb61a53900000000000000000000000000000000000000000000000000533b9ad9f0afa500000000000000000000000000000000000000000000121b06bb98ebc7760589",
        "logIndex": 17,
        "blockHash": "0x909dadab02a016c0a5f44aab458ac8975b166f3ddb1437e0e10233b0f8bb88d8"
      }
    ],
    "blockNumber": 37932698,
    "cumulativeGasUsed": "4923996",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "25634cfbe1fc43f6cfbac2337a44292a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ERC20TokenValue\",\"type\":\"uint256\"}],\"name\":\"MerchantPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PBMTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ERC20TokenValue\",\"type\":\"uint256\"}],\"name\":\"PBMrevokeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"spotAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenExpiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"postExpiryURI\",\"type\":\"string\"}],\"name\":\"createPBMTokenType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spotToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pbmAddressList\",\"type\":\"address\"}],\"name\":\"initialise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pbmAddressList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pbmTokenManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"revokePBM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"batchMint(uint256[],uint256[],address)\":{\"details\":\"See {IPBM-batchMint}.      IMPT: Before minting, the caller should approve the contract address to spend ERC-20 tokens on behalf of the caller.       This can be done by calling the `approve` or `increaseMinterAllowance` functions of the ERC-20 contract and specifying `_spender` to be the PBM contract address.  Ref : https://eips.ethereum.org/EIPS/eip-20 WARNING: Any contracts that externally call these mint() and batchMint() functions should implement some sort of reentrancy guard procedure (such as OpenZeppelin's ReentrancyGuard). Requirements: - contract must not be paused - tokens must not be expired - `tokenIds` should all be valid ids that have already been created - `tokenIds` and `amounts` list need to have the same number of values - caller should have the necessary amount of the ERC-20 tokens required to mint - caller should have approved the PBM contract to spend the ERC-20 tokens - receiver should not be blacklisted\"},\"createPBMTokenType(string,uint256,uint256,address,string,string)\":{\"details\":\"See {IPBM-createPBMTokenType}. Requirements: - caller must be owner - contract must not be expired - `tokenExpiry` must be less than contract expiry - `amount` should not be 0\"},\"getTokenDetails(uint256)\":{\"details\":\"See {IPBM-getTokenDetails}.\"},\"initialise(address,uint256,address)\":{\"params\":{\"_expiry\":\"contract wide expiry ( in epoch )\",\"_pbmAddressList\":\"address of the PBMAddressList smartcontract\",\"_spotToken\":\"address of the underlying ERC20 token\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(uint256,uint256,address)\":{\"details\":\"See {IPBM-mint}.      IMPT: Before minting, the caller should approve the contract address to spend ERC-20 tokens on behalf of the caller.       This can be done by calling the `approve` or `increaseMinterAllowance` functions of the ERC-20 contract and specifying `_spender` to be the PBM contract address.  Ref : https://eips.ethereum.org/EIPS/eip-20 WARNING: Any contracts that externally call these mint() and batchMint() functions should implement some sort of reentrancy guard procedure (such as OpenZeppelin's ReentrancyGuard). Requirements: - contract must not be paused - tokens must not be expired - `tokenId` should be a valid id that has already been created - caller should have the necessary amount of the ERC-20 tokens required to mint - caller should have approved the PBM contract to spend the ERC-20 tokens - receiver should not be blacklisted\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"see {Pausable _pause} Requirements : - caller should be owner\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokePBM(uint256)\":{\"details\":\"See {IPBM-revokePBM}. Requirements: - `tokenId` should be a valid ids that has already been created - caller must be the creator of the tokenType - token must be expired\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IPBM-safeBatchTransferFrom}. Requirements: - contract must not be paused - tokens must not be expired - `tokenIds` should all be  valid ids that has already been created - `tokenIds` and `amounts` list need to have the same number of values - caller should have the PBMs that are being transferred (or)          caller should have the approval to spend the PBMs on behalf of the owner (`from` addresss)\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IPBM-safeTransferFrom}. Requirements: - contract must not be paused - tokens must not be expired - `tokenId` should be a valid ids that has already been created - caller should have the PBMs that are being transferred (or)          caller should have the approval to spend the PBMs on behalf of the owner (`from` addresss)\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"see {Pausable _unpause} Requirements : - caller should be owner\"},\"uri(uint256)\":{\"details\":\"See {IPBM-uri}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"MerchantPayment(address,address,uint256[],uint256[],address,uint256)\":{\"notice\":\"Emitted when underlying ERC-20 tokens are transferred to a whitelisted merchant ( payment )\"},\"PBMrevokeWithdraw(address,uint256,address,uint256)\":{\"notice\":\"Emitted when a PBM type creator withdraws the underlying ERC-20 tokens from all the remaining expired PBMs\"}},\"kind\":\"user\",\"methods\":{\"initialise(address,uint256,address)\":{\"notice\":\"sets the address of the underlying ERC20 token, Contract Expiry, and the address of pbm address list\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PBM.sol\":\"PBM\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ERC20Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title TokenHelper\\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\\nlibrary ERC20Helper {\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        require(token != address(0), \\\"ERC20: Nil address\\\");\\n        require(Address.isContract(token), \\\"ERC20: EOA provided\\\");\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"Interaction with the spot token failed.\\\");\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param from The sender of the transfer\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        require(token != address(0), \\\"ERC20: Nil address\\\");\\n        require(Address.isContract(token), \\\"ERC20: EOA provided\\\");\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ERC20: Insufficent balance or approval\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x35e6581c774d4de3c2fa33be1170133671ab37604bca51b0ee2863c682d05c7f\",\"license\":\"MIT\"},\"contracts/IPBM.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title PBM interface\\n/// @notice The PBM (purpose bound money) allows us to add logical requirements on the use of ERC-20 tokens. The PBM acts as wrapper around the ERC-20 tokens and implements the necessary logic.\\ninterface IPBM {\\n    /// @notice sets the address of the underlying ERC20 token, Contract Expiry, and the address of pbm address list\\n    /// @param _spotToken address of the underlying ERC20 token\\n    /// @param _expiry contract wide expiry ( in epoch )\\n    /// @param _pbmAddressList address of the PBMAddressList smartcontract\\n    function initialise(address _spotToken, uint256 _expiry, address _pbmAddressList) external;\\n\\n    /// @notice Creates a new PBM token type with the data provided\\n    /// @param companyName Name of the company issuing the PBM\\n    /// @param spotAmount Amount of the underlying ERC-20 tokens the PBM type wraps around\\n    /// @param tokenExpiry The expiry date (in epoch) for this particular PBM token type\\n    /// @param tokenURI the URI (returns json) of PBM type that will follows the Opensea NFT metadata standard\\n    /// @param postExpiryURI the URI (returns json) of expired PBM type that will follows the Opensea NFT metadata standard\\n    /**\\n     * example response of token URI, ref : https://docs.opensea.io/docs/metadata-standards\\n     * {\\n     *     \\\"name\\\": \\\"StraitsX-12\\\",\\n     *     \\\"description\\\": \\\"12$ SGD test voucher\\\",\\n     *     \\\"image\\\": \\\"https://gateway.pinata.cloud/ipfs/QmQ1x7NHakFYin9bHwN7zy4NdSYS84w6C33hzxpZwCAFPu\\\",\\n     *     \\\"attributes\\\": [\\n     *         {\\n     *         \\\"trait_type\\\": \\\"Value\\\",\\n     *         \\\"value\\\": \\\"12\\\"\\n     *         }\\n     *     ]\\n     * }\\n     */\\n    function createPBMTokenType(\\n        string memory companyName,\\n        uint256 spotAmount,\\n        uint256 tokenExpiry,\\n        address creator,\\n        string memory tokenURI,\\n        string memory postExpiryURI\\n    ) external;\\n\\n    /// @notice Creates new PBM copies ( ERC1155 NFT ) of an existing PBM token type after ensuring it is backed by the necessary value of the underlying ERC-20 tokens\\n    /// @param tokenId The identifier of the PBM token type\\n    /// @param amount The number of the PBMs that are to be created\\n    /// @param receiver The wallet address to which the created PBMs need to be transferred to\\n    function mint(uint256 tokenId, uint256 amount, address receiver) external;\\n\\n    /// @notice Creates new PBM copies ( ERC1155 NFT ) of multiple existing PBM token types after ensuring they are backed by the necessary value of the underlying ERC-20 tokens\\n    /// @param tokenIds The identifiers of the PBM token type\\n    /// @param amounts The number of the PBMs that are to be created for each tokenId\\n    /// @param receiver The wallet address to which the created PBMs need to be transferred to\\n    function batchMint(uint256[] memory tokenIds, uint256[] memory amounts, address receiver) external;\\n\\n    /// @notice Transfers the PBM(NFT) from one wallet to another.\\n    /// If the receving wallet is a whitelisted merchant wallet address, the PBM(NFT) will be burnt and the underlying ERC-20 tokens will be transferred to the merchant wallet instead.\\n    /// @param from The account from which the PBM ( NFT ) is moving from\\n    /// @param to The account which is receiving the PBM ( NFT )\\n    /// @param id The identifier of the PBM token type\\n    /// @param amount The number of (quantity) the PBM type that are to be transferred of the PBM type\\n    /// @param data To record any data associated with the transaction, can be left blank if none\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) external;\\n\\n    /// @notice Transfers the PBM(NFT)(s) from one wallet to another.\\n    /// If the receving wallet is a whitelisted merchant wallet address, the PBM(NFT)(s) will be burnt and the underlying ERC-20 tokens will be transferred to the merchant wallet instead.\\n    /// @param from The account from which the PBM ( NFT )(s) is moving from\\n    /// @param to The account which is receiving the PBM ( NFT )(s)\\n    /// @param ids The identifiers of the different PBM token type\\n    /// @param amounts The number of ( quantity ) the different PBM types that are to be created\\n    /// @param data To record any data associated with the transaction, can be left blank if none.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    /// @notice Allows the creator of the PBM type to retrive all the locked up ERC-20 once they have expired for that particular token type\\n    /// @param tokenId The identifier of the PBM token type\\n    function revokePBM(uint256 tokenId) external;\\n\\n    /// @notice Get the details of the PBM Token type\\n    /// @param tokenId The identifier of the PBM token type\\n    /// @return name The name assigned to the token type\\n    /// @return amount Amount of the underlying ERC-20 tokens the PBM type wraps around\\n    /// @return expiry The expiry date (in epoch) for this particular PBM token type.\\n    /// @return creator The creator of the PBM token type\\n    function getTokenDetails(uint256 tokenId) external view returns (string memory, uint256, uint256, address);\\n\\n    /// @notice Get the URI of the tokenid\\n    /// @param tokenId The identifier of the PBM token type\\n    /// @return uri The URI link , which will povide a response that follows the Opensea metadata standard\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    /// @notice Emitted when underlying ERC-20 tokens are transferred to a whitelisted merchant ( payment )\\n    /// @param from The account from which the PBM ( NFT )(s) is moving from\\n    /// @param to The account which is receiving the PBM ( NFT )(s)\\n    /// @param tokenIds The identifiers of the different PBM token type\\n    /// @param amounts The number of ( quantity ) the different PBM types that are to be created\\n    /// @param ERC20Token The address of the underlying ERC-20 token\\n    /// @param ERC20TokenValue The number of underlying ERC-20 tokens transferred\\n    event MerchantPayment(\\n        address from,\\n        address to,\\n        uint256[] tokenIds,\\n        uint256[] amounts,\\n        address ERC20Token,\\n        uint256 ERC20TokenValue\\n    );\\n\\n    /// @notice Emitted when a PBM type creator withdraws the underlying ERC-20 tokens from all the remaining expired PBMs\\n    /// @param beneficiary the address ( PBM type creator ) which receives the ERC20 Token\\n    /// @param PBMTokenId The identifiers of the different PBM token type\\n    /// @param ERC20Token The address of the underlying ERC-20 token\\n    /// @param ERC20TokenValue The number of underlying ERC-20 tokens transferred\\n    event PBMrevokeWithdraw(address beneficiary, uint256 PBMTokenId, address ERC20Token, uint256 ERC20TokenValue);\\n}\\n\",\"keccak256\":\"0x10b8dfda63de59cf1f6bd6422efedc98f353ccc9e3c49144ce9e1a99cedf59ae\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IPBMAddressList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title PBM Address list Interface.\\n/// @notice The PBM address list stores and manages whitelisted merchants and blacklisted address for the PBMs\\ninterface IPBMAddressList {\\n    /// @notice Adds wallet addresses to the blacklist who are unable to receive the pbm tokens.\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function blacklistAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Removes wallet addresses from the blacklist who are  unable to receive the PBM tokens.\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function unBlacklistAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Checks if the address is one of the blacklisted addresses\\n    /// @param _address The address in query\\n    /// @return True if address is a blacklisted, else false\\n    function isBlacklisted(address _address) external returns (bool);\\n\\n    /// @notice Adds wallet addresses of merchants who are the only wallets able to receive the underlying ERC-20 tokens (whitelisting).\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function addMerchantAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Removes wallet addresses from the merchant addresses who are  able to receive the underlying ERC-20 tokens (un-whitelisting).\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    function removeMerchantAddresses(address[] memory addresses, string memory metadata) external;\\n\\n    /// @notice Checks if the address is one of the whitelisted merchant\\n    /// @param _address The address in query\\n    /// @return True if address is a merchant, else false\\n    function isMerchant(address _address) external returns (bool);\\n\\n    /// @notice Event emitted when the Merchant List is edited\\n    /// @param action Tags \\\"add\\\" or \\\"remove\\\" for action type\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    event MerchantList(string action, address[] addresses, string metadata);\\n\\n    /// @notice Event emitted when the Blacklist is edited\\n    /// @param action Tags \\\"add\\\" or \\\"remove\\\" for action type\\n    /// @param addresses The list of merchant wallet address\\n    /// @param metadata any comments on the addresses being added\\n    event Blacklist(string action, address[] addresses, string metadata);\\n}\\n\",\"keccak256\":\"0x202f0e811466e23f41d70c09edb1bdb21fc797f56a30197861b68cefa4a369fc\",\"license\":\"MIT\"},\"contracts/IPBMTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title PBMTokenManager Interface.\\n/// @notice The PBMTokenManager is the stores details of the different data types.\\ninterface IPBMTokenManager {\\n    /// @notice Returns the URI (metadata) for the PBM with the corresponding tokenId\\n    /// @param tokenId The id for the PBM in query\\n    /// @return Returns the metadata URI for the PBM\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    /// @notice Checks if tokens Ids have been created and are not expired\\n    /// @param tokenIds The ids for the PBM in query\\n    /// @return Returns true if all the tokenId are valid else false\\n    function areTokensValid(uint256[] memory tokenIds) external view returns (bool);\\n\\n    /// @notice gets the total value of underlying ERC20 tokens the PBM type holds\\n    /// @param tokenId The id for the PBM in query\\n    /// @return Returns the total ERC20 amount\\n    function getPBMRevokeValue(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice gets the amount of underlying ERC20 tokens each of the the PBM type holds\\n    /// @param tokenId The id for the PBM in query\\n    /// @return Returns the underlying ERC20 amount\\n    function getTokenValue(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice gets the count of the PBM type in supply\\n    /// @param tokenId The id for the PBM in query\\n    /// @return Returns the count of the PBM\\n    function getTokenCount(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice gets the address of the creator of the PBM type\\n    /// @param tokenId The id for the PBM in query\\n    /// @return Returns the address of the creator\\n    function getTokenCreator(uint256 tokenId) external view returns (address);\\n\\n    /// @notice Retreive the details for a PBM\\n    /// @param tokenId The id for the PBM in query\\n    /// @return name The name of the PBM type\\n    /// @return spotAmount Amount of underlying ERC20 held by the each of the PBM token\\n    /// @return expiry  Expiry time (in epoch) for the PBM type\\n    /// @return creator Creator for the PBM type\\n    function getTokenDetails(\\n        uint256 tokenId\\n    ) external view returns (string memory name, uint256 spotAmount, uint256 expiry, address creator);\\n\\n    /// @notice Creates a PBM token type, with all its necessary details\\n    /// @param companyName The name of the company/agency issuing this PBM type\\n    /// @param spotAmount The number of ERC-20 tokens that is used as the underlying currency for PBM\\n    /// @param tokenExpiry The expiry date (in epoch) of th PBM type\\n    /// @param creator The address of the account that creates the PBM type\\n    /// @param tokenURI the URI containting the metadata (opensea standard for ERC1155) for the  PBM type\\n    /// @param postExpiryURI the URI containting the metadata (opensea standard for ERC1155) for the expired PBM type\\n    /// @param contractExpiry the expiry time (in epoch) for the overall PBM contract\\n    function createTokenType(\\n        string memory companyName,\\n        uint256 spotAmount,\\n        uint256 tokenExpiry,\\n        address creator,\\n        string memory tokenURI,\\n        string memory postExpiryURI,\\n        uint256 contractExpiry\\n    ) external;\\n\\n    /// @notice increases the supply count for the PBM\\n    /// @param tokenIds The ids for which the supply count needs to be increased\\n    /// @param amounts The amounts by whch the supply counnt needs to be increased\\n    function increaseBalanceSupply(uint256[] memory tokenIds, uint256[] memory amounts) external;\\n\\n    /// @notice decreases the supply count for the PBM\\n    /// @param tokenIds The ids for which the supply count needs to be decreased\\n    /// @param amounts The amounts by whch the supply counnt needs to be decreased\\n    function decreaseBalanceSupply(uint256[] memory tokenIds, uint256[] memory amounts) external;\\n\\n    /// @notice  performs all the necessary actions required after the revoking of a PBM type\\n    /// @param tokenId The PBM tokenId which has been revoked\\n    /// @param sender updated token URI to convey revoking, if part of design\\n    function revokePBM(uint256 tokenId, address sender) external;\\n\\n    /// @notice Event emitted when a new PBM token type is created\\n    /// @param tokenId The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param tokenName The account to which the tokens were sent, i.e. the balance increased\\n    /// @param amount The amount of tokens that were transferred\\n    /// @param expiry The time (in epoch) when the PBM type will expire\\n    /// @param creator The creator of the this PBM type\\n    event NewPBMTypeCreated(uint256 tokenId, string tokenName, uint256 amount, uint256 expiry, address creator);\\n}\\n\",\"keccak256\":\"0xc9ef6c626e8f07357f2bb00f267215a8c3a27f8991fb8c2bf7fd8f89dcde0204\",\"license\":\"MIT\"},\"contracts/NoDelegateCall.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/// @title Prevents delegatecall to a contract\\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\\nabstract contract NoDelegateCall {\\n    /// @dev The original address of this contract\\n    address private immutable original;\\n\\n    constructor() {\\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\\n        // In other words, this variable won't change when it's checked at runtime.\\n        original = address(this);\\n    }\\n\\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\\n    function checkNotDelegateCall() private view {\\n        require(address(this) == original, \\\"Delegate calls restricted\\\");\\n    }\\n\\n    /// @notice Prevents delegatecall into the modified method\\n    modifier noDelegateCall() {\\n        checkNotDelegateCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x11bd3eb59d1d1d8ed1098972ee376ac3d9846b8a21b896b25811cdc3b5d61a2e\",\"license\":\"BUSL-1.1\"},\"contracts/PBM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./ERC20Helper.sol\\\";\\nimport \\\"./PBMTokenManager.sol\\\";\\nimport \\\"./IPBM.sol\\\";\\nimport \\\"./IPBMAddressList.sol\\\";\\n\\ncontract PBM is ERC1155, Ownable, Pausable, IPBM {\\n    // undelrying ERC-20 tokens\\n    address public spotToken = address(0);\\n    // address of the token manager\\n    address public pbmTokenManager = address(0);\\n    // address of the PBM-Addresslist\\n    address public pbmAddressList = address(0);\\n\\n    // tracks contract initialisation\\n    bool internal initialised = false;\\n    // time of expiry ( epoch )\\n    uint256 public contractExpiry;\\n\\n    constructor() ERC1155(\\\"\\\") {\\n        pbmTokenManager = address(new PBMTokenManager());\\n    }\\n\\n    function initialise(address _spotToken, uint256 _expiry, address _pbmAddressList) external override onlyOwner {\\n        require(!initialised, \\\"PBM: Already initialised\\\");\\n        require(Address.isContract(_spotToken), \\\"Invalid spot token\\\");\\n        require(Address.isContract(_pbmAddressList), \\\"Invalid spot token\\\");\\n        spotToken = _spotToken;\\n        contractExpiry = _expiry;\\n        pbmAddressList = _pbmAddressList;\\n\\n        initialised = true;\\n    }\\n\\n    /**\\n     * @dev See {IPBM-createPBMTokenType}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner\\n     * - contract must not be expired\\n     * - `tokenExpiry` must be less than contract expiry\\n     * - `amount` should not be 0\\n     */\\n    function createPBMTokenType(\\n        string memory companyName,\\n        uint256 spotAmount,\\n        uint256 tokenExpiry,\\n        address creator,\\n        string memory tokenURI,\\n        string memory postExpiryURI\\n    ) external override onlyOwner {\\n        PBMTokenManager(pbmTokenManager).createTokenType(\\n            companyName,\\n            spotAmount,\\n            tokenExpiry,\\n            creator,\\n            tokenURI,\\n            postExpiryURI,\\n            contractExpiry\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IPBM-mint}.\\n     *     \\n     * IMPT: Before minting, the caller should approve the contract address to spend ERC-20 tokens on behalf of the caller.\\n     *       This can be done by calling the `approve` or `increaseMinterAllowance` functions of the ERC-20 contract and specifying `_spender` to be the PBM contract address. \\n             Ref : https://eips.ethereum.org/EIPS/eip-20\\n\\n       WARNING: Any contracts that externally call these mint() and batchMint() functions should implement some sort of reentrancy guard procedure (such as OpenZeppelin's ReentrancyGuard).\\n     *\\n     * Requirements:\\n     *\\n     * - contract must not be paused\\n     * - tokens must not be expired\\n     * - `tokenId` should be a valid id that has already been created\\n     * - caller should have the necessary amount of the ERC-20 tokens required to mint\\n     * - caller should have approved the PBM contract to spend the ERC-20 tokens\\n     * - receiver should not be blacklisted\\n     */\\n    function mint(uint256 tokenId, uint256 amount, address receiver) external override whenNotPaused {\\n        require(!IPBMAddressList(pbmAddressList).isBlacklisted(receiver), \\\"PBM: 'to' address blacklisted\\\");\\n        uint256 valueOfNewTokens = amount * (PBMTokenManager(pbmTokenManager).getTokenValue(tokenId));\\n\\n        //Transfer the spot token from the user to the contract to wrap it\\n        ERC20Helper.safeTransferFrom(spotToken, msg.sender, address(this), valueOfNewTokens);\\n\\n        // mint the token if the contract - wrapping the xsgd\\n        PBMTokenManager(pbmTokenManager).increaseBalanceSupply(serialise(tokenId), serialise(amount));\\n        _mint(receiver, tokenId, amount, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IPBM-batchMint}.\\n     *     \\n     * IMPT: Before minting, the caller should approve the contract address to spend ERC-20 tokens on behalf of the caller.\\n     *       This can be done by calling the `approve` or `increaseMinterAllowance` functions of the ERC-20 contract and specifying `_spender` to be the PBM contract address. \\n             Ref : https://eips.ethereum.org/EIPS/eip-20\\n\\n       WARNING: Any contracts that externally call these mint() and batchMint() functions should implement some sort of reentrancy guard procedure (such as OpenZeppelin's ReentrancyGuard).\\n     *\\n     * Requirements:\\n     *\\n     * - contract must not be paused\\n     * - tokens must not be expired\\n     * - `tokenIds` should all be valid ids that have already been created\\n     * - `tokenIds` and `amounts` list need to have the same number of values\\n     * - caller should have the necessary amount of the ERC-20 tokens required to mint\\n     * - caller should have approved the PBM contract to spend the ERC-20 tokens\\n     * - receiver should not be blacklisted\\n     */\\n    function batchMint(\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        address receiver\\n    ) external override whenNotPaused {\\n        require(!IPBMAddressList(pbmAddressList).isBlacklisted(receiver), \\\"PBM: 'to' address blacklisted\\\");\\n        require(tokenIds.length == amounts.length, \\\"Unequal ids and amounts supplied\\\");\\n\\n        // calculate the value of the new tokens\\n        uint256 valueOfNewTokens = 0;\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            valueOfNewTokens += (amounts[i] * (PBMTokenManager(pbmTokenManager).getTokenValue(tokenIds[i])));\\n        }\\n\\n        // Transfer spot tokenf from user to contract to wrap it\\n        ERC20Helper.safeTransferFrom(spotToken, msg.sender, address(this), valueOfNewTokens);\\n        PBMTokenManager(pbmTokenManager).increaseBalanceSupply(tokenIds, amounts);\\n        _mintBatch(receiver, tokenIds, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IPBM-safeTransferFrom}.\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - contract must not be paused\\n     * - tokens must not be expired\\n     * - `tokenId` should be a valid ids that has already been created\\n     * - caller should have the PBMs that are being transferred (or)\\n     *          caller should have the approval to spend the PBMs on behalf of the owner (`from` addresss)\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public override(ERC1155, IPBM) whenNotPaused {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        require(!IPBMAddressList(pbmAddressList).isBlacklisted(to), \\\"PBM: 'to' address blacklisted\\\");\\n\\n        if (IPBMAddressList(pbmAddressList).isMerchant(to)) {\\n            uint256 valueOfTokens = amount * (PBMTokenManager(pbmTokenManager).getTokenValue(id));\\n\\n            // burn and transfer underlying ERC-20\\n            _burn(from, id, amount);\\n            PBMTokenManager(pbmTokenManager).decreaseBalanceSupply(serialise(id), serialise(amount));\\n            ERC20Helper.safeTransfer(spotToken, to, valueOfTokens);\\n            emit MerchantPayment(from, to, serialise(id), serialise(amount), spotToken, valueOfTokens);\\n        } else {\\n            _safeTransferFrom(from, to, id, amount, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IPBM-safeBatchTransferFrom}.\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - contract must not be paused\\n     * - tokens must not be expired\\n     * - `tokenIds` should all be  valid ids that has already been created\\n     * - `tokenIds` and `amounts` list need to have the same number of values\\n     * - caller should have the PBMs that are being transferred (or)\\n     *          caller should have the approval to spend the PBMs on behalf of the owner (`from` addresss)\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public override(ERC1155, IPBM) whenNotPaused {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        require(!IPBMAddressList(pbmAddressList).isBlacklisted(to), \\\"PBM: 'to' address blacklisted\\\");\\n        require(ids.length == amounts.length, \\\"Unequal ids and amounts supplied\\\");\\n\\n        if (IPBMAddressList(pbmAddressList).isMerchant(to)) {\\n            uint256 valueOfTokens = 0;\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                valueOfTokens += (amounts[i] * (PBMTokenManager(pbmTokenManager).getTokenValue(ids[i])));\\n            }\\n\\n            _burnBatch(from, ids, amounts);\\n            PBMTokenManager(pbmTokenManager).decreaseBalanceSupply(ids, amounts);\\n            ERC20Helper.safeTransfer(spotToken, to, valueOfTokens);\\n\\n            emit MerchantPayment(from, to, ids, amounts, spotToken, valueOfTokens);\\n        } else {\\n            _safeBatchTransferFrom(from, to, ids, amounts, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IPBM-revokePBM}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` should be a valid ids that has already been created\\n     * - caller must be the creator of the tokenType\\n     * - token must be expired\\n     */\\n    function revokePBM(uint256 tokenId) external override whenNotPaused {\\n        uint256 valueOfTokens = PBMTokenManager(pbmTokenManager).getPBMRevokeValue(tokenId);\\n\\n        PBMTokenManager(pbmTokenManager).revokePBM(tokenId, msg.sender);\\n\\n        // transfering underlying ERC20 tokens\\n        ERC20Helper.safeTransfer(spotToken, msg.sender, valueOfTokens);\\n\\n        emit PBMrevokeWithdraw(msg.sender, tokenId, spotToken, valueOfTokens);\\n    }\\n\\n    /**\\n     * @dev See {IPBM-getTokenDetails}.\\n     *\\n     */\\n    function getTokenDetails(\\n        uint256 tokenId\\n    ) external view override returns (string memory, uint256, uint256, address) {\\n        return PBMTokenManager(pbmTokenManager).getTokenDetails(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IPBM-uri}.\\n     *\\n     */\\n    function uri(uint256 tokenId) public view override(ERC1155, IPBM) returns (string memory) {\\n        return PBMTokenManager(pbmTokenManager).uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev see {Pausable _pause}\\n     *\\n     * Requirements :\\n     * - caller should be owner\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev see {Pausable _unpause}\\n     *\\n     * Requirements :\\n     * - caller should be owner\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function serialise(uint256 num) internal pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = num;\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xfa1db4cfe334cee42c4d4ee8f88520a9aa1bb066c3a9452cc136a24c0d12924b\",\"license\":\"MIT\"},\"contracts/PBMTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPBMTokenManager.sol\\\";\\nimport \\\"./NoDelegateCall.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PBMTokenManager is Ownable, IPBMTokenManager, NoDelegateCall {\\n    using Strings for uint256;\\n\\n    // counter used to create new token types\\n    uint256 internal tokenTypeCount = 0;\\n\\n    // structure representing all the details of a PBM type\\n    struct TokenConfig {\\n        string name;\\n        uint256 amount;\\n        uint256 expiry;\\n        address creator;\\n        uint256 balanceSupply;\\n        string uri;\\n        string postExpiryURI;\\n    }\\n\\n    // mapping of token ids to token details\\n    mapping(uint256 => TokenConfig) internal tokenTypes;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev See {IPBMTokenManager-createPBMTokenType}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner ( PBM contract )\\n     * - contract must not be expired\\n     * - token expiry must be less than contract expiry\\n     * - `amount` should not be 0\\n     */\\n    function createTokenType(\\n        string memory companyName,\\n        uint256 spotAmount,\\n        uint256 tokenExpiry,\\n        address creator,\\n        string memory tokenURI,\\n        string memory postExpiryURI,\\n        uint256 contractExpiry\\n    ) external override onlyOwner noDelegateCall {\\n        require(tokenExpiry <= contractExpiry, \\\"Invalid token expiry-1\\\");\\n        require(tokenExpiry > block.timestamp, \\\"Invalid token expiry-2\\\");\\n        require(spotAmount != 0, \\\"Spot amount is 0\\\");\\n\\n        string memory tokenName = string(abi.encodePacked(companyName, spotAmount.toString()));\\n        tokenTypes[tokenTypeCount].name = tokenName;\\n        tokenTypes[tokenTypeCount].amount = spotAmount;\\n        tokenTypes[tokenTypeCount].expiry = tokenExpiry;\\n        tokenTypes[tokenTypeCount].creator = creator;\\n        tokenTypes[tokenTypeCount].balanceSupply = 0;\\n        tokenTypes[tokenTypeCount].uri = tokenURI;\\n        tokenTypes[tokenTypeCount].postExpiryURI = postExpiryURI;\\n\\n        emit NewPBMTypeCreated(tokenTypeCount, tokenName, spotAmount, tokenExpiry, creator);\\n        tokenTypeCount += 1;\\n    }\\n\\n    /**\\n     * @dev See {IPBMTokenManager-revokePBM}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner ( PBM contract )\\n     * - token must be expired\\n     * - `tokenId` should be a valid id that has already been created\\n     * - `sender` must be the token type creator\\n     */\\n    function revokePBM(uint256 tokenId, address sender) external override onlyOwner {\\n        require(\\n            sender == tokenTypes[tokenId].creator && block.timestamp >= tokenTypes[tokenId].expiry,\\n            \\\"PBM not revokable\\\"\\n        );\\n        tokenTypes[tokenId].balanceSupply = 0;\\n    }\\n\\n    /**\\n     * @dev See {IPBMTokenManager-increaseBalanceSupply}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner ( PBM contract )\\n     * - `tokenId` should be a valid id that has already been created\\n     * - `sender` must be the token type creator\\n     */\\n    function increaseBalanceSupply(uint256[] memory tokenIds, uint256[] memory amounts) external override onlyOwner {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(\\n                tokenTypes[tokenIds[i]].amount != 0 && block.timestamp < tokenTypes[tokenIds[i]].expiry,\\n                \\\"PBM: Invalid Token Id(s)\\\"\\n            );\\n            tokenTypes[tokenIds[i]].balanceSupply += amounts[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IPBMTokenManager-decreaseBalanceSupply}.\\n     *\\n     * Requirements:\\n     *\\n     * - caller must be owner ( PBM contract )\\n     * - `tokenId` should be a valid id that has already been created\\n     * - `sender` must be the token type creator\\n     */\\n    function decreaseBalanceSupply(uint256[] memory tokenIds, uint256[] memory amounts) external override onlyOwner {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(\\n                tokenTypes[tokenIds[i]].amount != 0 && block.timestamp < tokenTypes[tokenIds[i]].expiry,\\n                \\\"PBM: Invalid Token Id(s)\\\"\\n            );\\n            tokenTypes[tokenIds[i]].balanceSupply -= amounts[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IPBMTokenManager-uri}.\\n     *\\n     */\\n    function uri(uint256 tokenId) external view override returns (string memory) {\\n        if (block.timestamp >= tokenTypes[tokenId].expiry) {\\n            return tokenTypes[tokenId].postExpiryURI;\\n        }\\n        return tokenTypes[tokenId].uri;\\n    }\\n\\n    /**\\n     * @dev See {IPBMTokenManager-areTokensValid}.\\n     *\\n     */\\n    function areTokensValid(uint256[] memory tokenIds) external view override returns (bool) {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (block.timestamp > tokenTypes[i].expiry || tokenTypes[i].amount == 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IPBMTokenManager-getTokenDetails}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` should be a valid id that has already been created\\n     */\\n    function getTokenDetails(\\n        uint256 tokenId\\n    ) external view override returns (string memory, uint256, uint256, address) {\\n        require(tokenTypes[tokenId].amount != 0, \\\"PBM: Invalid Token Id(s)\\\");\\n        return (\\n            tokenTypes[tokenId].name,\\n            tokenTypes[tokenId].amount,\\n            tokenTypes[tokenId].expiry,\\n            tokenTypes[tokenId].creator\\n        );\\n    }\\n\\n    /**\\n     * @dev See {IPBMTokenManager-getPBMRevokeValue}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` should be a valid id that has already been created\\n     */\\n    function getPBMRevokeValue(uint256 tokenId) external view override returns (uint256) {\\n        require(tokenTypes[tokenId].amount != 0, \\\"PBM: Invalid Token Id(s)\\\");\\n        return tokenTypes[tokenId].amount * tokenTypes[tokenId].balanceSupply;\\n    }\\n\\n    /**\\n     * @dev See {IPBMTokenManager-getTokenValue}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` should be a valid id that has already been created\\n     */\\n    function getTokenValue(uint256 tokenId) external view override returns (uint256) {\\n        require(\\n            tokenTypes[tokenId].amount != 0 && block.timestamp < tokenTypes[tokenId].expiry,\\n            \\\"PBM: Invalid Token Id(s)\\\"\\n        );\\n        return tokenTypes[tokenId].amount;\\n    }\\n\\n    /**\\n     * @dev See {IPBMTokenManager-getTokenCount}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` should be a valid id that has already been created\\n     */\\n    function getTokenCount(uint256 tokenId) external view override returns (uint256) {\\n        require(\\n            tokenTypes[tokenId].amount != 0 && block.timestamp < tokenTypes[tokenId].expiry,\\n            \\\"PBM: Invalid Token Id(s)\\\"\\n        );\\n        return tokenTypes[tokenId].balanceSupply;\\n    }\\n\\n    /**\\n     * @dev See {IPBMTokenManager-getTokenCreator}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` should be a valid id that has already been created\\n     */\\n    function getTokenCreator(uint256 tokenId) external view override returns (address) {\\n        require(\\n            tokenTypes[tokenId].amount != 0 && block.timestamp < tokenTypes[tokenId].expiry,\\n            \\\"PBM: Invalid Token Id(s)\\\"\\n        );\\n        return tokenTypes[tokenId].creator;\\n    }\\n}\\n\",\"keccak256\":\"0x0683882f66ee2879f2485b5d2e4c28f8d37e643f57d4b5116ec173f52dafafbd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101575760003560e01c8063715018a6116100c3578063c1e037281161007c578063c1e03728146102db578063e7d3fe6b146102fe578063e985e9c514610311578063f242432a1461034d578063f2fde38b14610360578063fb34b2011461037357600080fd5b8063715018a61461028b57806373e17e76146102935780638456cb59146102a657806389aba642146102ae5780638da5cb5b146102b7578063a22cb465146102c857600080fd5b80633f4ba83a116101155780633f4ba83a146102185780634e1273f41461022057806351e86cf6146102405780635c975abb1461025357806361fc81211461026557806363be47d21461027857600080fd5b8062fdd58e1461015c57806301ffc9a71461018257806307e82e0f146101a55780630ad89462146101ba5780630e89341c146101e55780632eb2c2d614610205575b600080fd5b61016f61016a36600461258e565b610386565b6040519081526020015b60405180910390f35b6101956101903660046125d0565b61041c565b6040519015158152602001610179565b6101b86101b33660046125f4565b61046e565b005b6004546101cd906001600160a01b031681565b6040516001600160a01b039091168152602001610179565b6101f86101f3366004612636565b6105a9565b60405161017991906126a7565b6101b8610213366004612816565b61062a565b6101b86109ba565b61023361022e3660046128c4565b6109cc565b60405161017991906129cc565b6006546101cd906001600160a01b031681565b600354600160a01b900460ff16610195565b6101b86102733660046129df565b610af6565b6005546101cd906001600160a01b031681565b6101b8610b75565b6101b86102a1366004612636565b610b87565b6101b8610cdf565b61016f60075481565b6003546001600160a01b03166101cd565b6101b86102d6366004612a9c565b610cef565b6102ee6102e9366004612636565b610cfe565b6040516101799493929190612ad5565b6101b861030c366004612b0d565b610d97565b61019561031f366004612b3b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101b861035b366004612b69565b610f70565b6101b861036e366004612bd2565b61124f565b6101b8610381366004612bef565b6112c8565b60006001600160a01b0383166103f65760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061044d57506001600160e01b031982166303a24d0760e21b145b8061046857506301ffc9a760e01b6001600160e01b03198316145b92915050565b610476611543565b600654600160a01b900460ff16156104d05760405162461bcd60e51b815260206004820152601860248201527f50424d3a20416c726561647920696e697469616c69736564000000000000000060448201526064016103ed565b6001600160a01b0383163b61051c5760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21039b837ba103a37b5b2b760711b60448201526064016103ed565b6001600160a01b0381163b6105685760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21039b837ba103a37b5b2b760711b60448201526064016103ed565b600480546001600160a01b039485166001600160a01b0319909116179055600791909155600680546001600160a81b0319169190921617600160a01b179055565b6005546040516303a24d0760e21b8152600481018390526060916001600160a01b031690630e89341c9060240160006040518083038186803b1580156105ee57600080fd5b505afa158015610602573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104689190810190612cb4565b61063261159d565b6001600160a01b03851633148061064e575061064e853361031f565b61066a5760405162461bcd60e51b81526004016103ed90612cf1565b60065460405163fe575a8760e01b81526001600160a01b0386811660048301529091169063fe575a8790602401602060405180830381600087803b1580156106b157600080fd5b505af11580156106c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e99190612d40565b156107065760405162461bcd60e51b81526004016103ed90612d5d565b81518351146107575760405162461bcd60e51b815260206004820181905260248201527f556e657175616c2069647320616e6420616d6f756e747320737570706c69656460448201526064016103ed565b600654604051631a2f716760e01b81526001600160a01b03868116600483015290911690631a2f716790602401602060405180830381600087803b15801561079e57600080fd5b505af11580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d69190612d40565b156109a6576000805b84518110156108c95760055485516001600160a01b039091169063d10424c79087908490811061081157610811612d94565b60200260200101516040518263ffffffff1660e01b815260040161083791815260200190565b60206040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108879190612daa565b84828151811061089957610899612d94565b60200260200101516108ab9190612dd9565b6108b59083612df8565b9150806108c181612e10565b9150506107df565b506108d58685856115ea565b60055460405163e21c8b5960e01b81526001600160a01b039091169063e21c8b59906109079087908790600401612e2b565b600060405180830381600087803b15801561092157600080fd5b505af1158015610935573d6000803e3d6000fd5b505060045461095192506001600160a01b031690508683611774565b6004546040517f68c9cd42836993caa70415e61f3c3baceb0bb31dcb22af6e5e0db98fa8870fac916109989189918991899189916001600160a01b03909116908890612e50565b60405180910390a1506109b3565b6109b38585858585611930565b5050505050565b6109c2611543565b6109ca611acc565b565b60608151835114610a315760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016103ed565b6000835167ffffffffffffffff811115610a4d57610a4d6126ba565b604051908082528060200260200182016040528015610a76578160200160208202803683370190505b50905060005b8451811015610aee57610ac1858281518110610a9a57610a9a612d94565b6020026020010151858381518110610ab457610ab4612d94565b6020026020010151610386565b828281518110610ad357610ad3612d94565b6020908102919091010152610ae781612e10565b9050610a7c565b509392505050565b610afe611543565b600554600754604051633f06d4ed60e11b81526001600160a01b0390921691637e0da9da91610b3b918a918a918a918a918a918a91600401612ea3565b600060405180830381600087803b158015610b5557600080fd5b505af1158015610b69573d6000803e3d6000fd5b50505050505050505050565b610b7d611543565b6109ca6000611b21565b610b8f61159d565b600554604051631a410e9b60e31b8152600481018390526000916001600160a01b03169063d20874d89060240160206040518083038186803b158015610bd457600080fd5b505afa158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c9190612daa565b600554604051630da8d02760e21b8152600481018590523360248201529192506001600160a01b0316906336a3409c90604401600060405180830381600087803b158015610c5957600080fd5b505af1158015610c6d573d6000803e3d6000fd5b5050600454610c8992506001600160a01b031690503383611774565b60045460408051338152602081018590526001600160a01b039092168282015260608201839052517fa1c359e2aefcb2a02fa122099023552498d16ee2c91b81d3cfd8cd086f037d449181900360800190a15050565b610ce7611543565b6109ca611b73565b610cfa338383611bb6565b5050565b60055460405163183c06e560e31b815260048101839052606091600091829182916001600160a01b039091169063c1e037289060240160006040518083038186803b158015610d4c57600080fd5b505afa158015610d60573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d889190810190612f0e565b93509350935093509193509193565b610d9f61159d565b60065460405163fe575a8760e01b81526001600160a01b0383811660048301529091169063fe575a8790602401602060405180830381600087803b158015610de657600080fd5b505af1158015610dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1e9190612d40565b15610e3b5760405162461bcd60e51b81526004016103ed90612d5d565b60055460405163d10424c760e01b8152600481018590526000916001600160a01b03169063d10424c79060240160206040518083038186803b158015610e8057600080fd5b505afa158015610e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb89190612daa565b610ec29084612dd9565b600454909150610edd906001600160a01b0316333084611c97565b6005546001600160a01b031663f600d9f4610ef786611e5a565b610f0086611e5a565b6040518363ffffffff1660e01b8152600401610f1d929190612e2b565b600060405180830381600087803b158015610f3757600080fd5b505af1158015610f4b573d6000803e3d6000fd5b50505050610f6a82858560405180602001604052806000815250611ea5565b50505050565b610f7861159d565b6001600160a01b038516331480610f945750610f94853361031f565b610fb05760405162461bcd60e51b81526004016103ed90612cf1565b60065460405163fe575a8760e01b81526001600160a01b0386811660048301529091169063fe575a8790602401602060405180830381600087803b158015610ff757600080fd5b505af115801561100b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102f9190612d40565b1561104c5760405162461bcd60e51b81526004016103ed90612d5d565b600654604051631a2f716760e01b81526001600160a01b03868116600483015290911690631a2f716790602401602060405180830381600087803b15801561109357600080fd5b505af11580156110a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cb9190612d40565b156112425760055460405163d10424c760e01b8152600481018590526000916001600160a01b03169063d10424c79060240160206040518083038186803b15801561111557600080fd5b505afa158015611129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114d9190612daa565b6111579084612dd9565b9050611164868585611f7f565b6005546001600160a01b031663e21c8b5961117e86611e5a565b61118786611e5a565b6040518363ffffffff1660e01b81526004016111a4929190612e2b565b600060405180830381600087803b1580156111be57600080fd5b505af11580156111d2573d6000803e3d6000fd5b50506004546111ee92506001600160a01b031690508683611774565b7f68c9cd42836993caa70415e61f3c3baceb0bb31dcb22af6e5e0db98fa8870fac868661121a87611e5a565b61122387611e5a565b60045460405161099895949392916001600160a01b0316908890612e50565b6109b38585858585612083565b611257611543565b6001600160a01b0381166112bc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ed565b6112c581611b21565b50565b6112d061159d565b60065460405163fe575a8760e01b81526001600160a01b0383811660048301529091169063fe575a8790602401602060405180830381600087803b15801561131757600080fd5b505af115801561132b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134f9190612d40565b1561136c5760405162461bcd60e51b81526004016103ed90612d5d565b81518351146113bd5760405162461bcd60e51b815260206004820181905260248201527f556e657175616c2069647320616e6420616d6f756e747320737570706c69656460448201526064016103ed565b6000805b84518110156114ab5760055485516001600160a01b039091169063d10424c7908790849081106113f3576113f3612d94565b60200260200101516040518263ffffffff1660e01b815260040161141991815260200190565b60206040518083038186803b15801561143157600080fd5b505afa158015611445573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114699190612daa565b84828151811061147b5761147b612d94565b602002602001015161148d9190612dd9565b6114979083612df8565b9150806114a381612e10565b9150506113c1565b506004546114c4906001600160a01b0316333084611c97565b600554604051633d80367d60e21b81526001600160a01b039091169063f600d9f4906114f69087908790600401612e2b565b600060405180830381600087803b15801561151057600080fd5b505af1158015611524573d6000803e3d6000fd5b50505050610f6a828585604051806020016040528060008152506121ad565b6003546001600160a01b031633146109ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ed565b600354600160a01b900460ff16156109ca5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103ed565b6001600160a01b0383166116105760405162461bcd60e51b81526004016103ed90612f71565b80518251146116315760405162461bcd60e51b81526004016103ed90612fb4565b604080516020810190915260009081905233905b835181101561170757600084828151811061166257611662612d94565b60200260200101519050600084838151811061168057611680612d94565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156116d05760405162461bcd60e51b81526004016103ed90612ffc565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806116ff81612e10565b915050611645565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611758929190612e2b565b60405180910390a4604080516020810190915260009052610f6a565b6001600160a01b0383166117bf5760405162461bcd60e51b815260206004820152601260248201527145524332303a204e696c206164647265737360701b60448201526064016103ed565b6001600160a01b0383163b61180c5760405162461bcd60e51b8152602060048201526013602482015272115490cc8c0e881153d0481c1c9bdd9a591959606a1b60448201526064016103ed565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916118689190613040565b6000604051808303816000865af19150503d80600081146118a5576040519150601f19603f3d011682016040523d82523d6000602084013e6118aa565b606091505b50915091508180156118d45750805115806118d45750808060200190518101906118d49190612d40565b6109b35760405162461bcd60e51b815260206004820152602760248201527f496e746572616374696f6e2077697468207468652073706f7420746f6b656e206044820152663330b4b632b21760c91b60648201526084016103ed565b81518351146119515760405162461bcd60e51b81526004016103ed90612fb4565b6001600160a01b0384166119775760405162461bcd60e51b81526004016103ed9061305c565b3360005b8451811015611a5e57600085828151811061199857611998612d94565b6020026020010151905060008583815181106119b6576119b6612d94565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611a065760405162461bcd60e51b81526004016103ed906130a1565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a43908490612df8565b9250508190555050505080611a5790612e10565b905061197b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611aae929190612e2b565b60405180910390a4611ac48187878787876122f4565b505050505050565b611ad461245f565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611b7b61159d565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611b043390565b816001600160a01b0316836001600160a01b03161415611c2a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016103ed565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611ce25760405162461bcd60e51b815260206004820152601260248201527145524332303a204e696c206164647265737360701b60448201526064016103ed565b6001600160a01b0384163b611d2f5760405162461bcd60e51b8152602060048201526013602482015272115490cc8c0e881153d0481c1c9bdd9a591959606a1b60448201526064016103ed565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691611d939190613040565b6000604051808303816000865af19150503d8060008114611dd0576040519150601f19603f3d011682016040523d82523d6000602084013e611dd5565b606091505b5091509150818015611dff575080511580611dff575080806020019051810190611dff9190612d40565b611ac45760405162461bcd60e51b815260206004820152602660248201527f45524332303a20496e737566666963656e742062616c616e6365206f722061706044820152651c1c9bdd985b60d21b60648201526084016103ed565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611e9457611e94612d94565b602090810291909101015292915050565b6001600160a01b038416611ecb5760405162461bcd60e51b81526004016103ed906130eb565b336000611ed785611e5a565b90506000611ee485611e5a565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290611f16908490612df8565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611f76836000898989896124af565b50505050505050565b6001600160a01b038316611fa55760405162461bcd60e51b81526004016103ed90612f71565b336000611fb184611e5a565b90506000611fbe84611e5a565b60408051602080820183526000918290528882528181528282206001600160a01b038b168352905220549091508481101561200b5760405162461bcd60e51b81526004016103ed90612ffc565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611f76565b6001600160a01b0384166120a95760405162461bcd60e51b81526004016103ed9061305c565b3360006120b585611e5a565b905060006120c285611e5a565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156121055760405162461bcd60e51b81526004016103ed906130a1565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612142908490612df8565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46121a2848a8a8a8a8a6124af565b505050505050505050565b6001600160a01b0384166121d35760405162461bcd60e51b81526004016103ed906130eb565b81518351146121f45760405162461bcd60e51b81526004016103ed90612fb4565b3360005b84518110156122905783818151811061221357612213612d94565b602002602001015160008087848151811061223057612230612d94565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546122789190612df8565b9091555081905061228881612e10565b9150506121f8565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122e1929190612e2b565b60405180910390a46109b3816000878787875b6001600160a01b0384163b15611ac45760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190612338908990899088908890889060040161312c565b602060405180830381600087803b15801561235257600080fd5b505af1925050508015612382575060408051601f3d908101601f1916820190925261237f9181019061318a565b60015b61242f5761238e6131a7565b806308c379a014156123c857506123a36131c3565b806123ae57506123ca565b8060405162461bcd60e51b81526004016103ed91906126a7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016103ed565b6001600160e01b0319811663bc197c8160e01b14611f765760405162461bcd60e51b81526004016103ed9061324d565b600354600160a01b900460ff166109ca5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103ed565b6001600160a01b0384163b15611ac45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906124f39089908990889088908890600401613295565b602060405180830381600087803b15801561250d57600080fd5b505af192505050801561253d575060408051601f3d908101601f1916820190925261253a9181019061318a565b60015b6125495761238e6131a7565b6001600160e01b0319811663f23a6e6160e01b14611f765760405162461bcd60e51b81526004016103ed9061324d565b6001600160a01b03811681146112c557600080fd5b600080604083850312156125a157600080fd5b82356125ac81612579565b946020939093013593505050565b6001600160e01b0319811681146112c557600080fd5b6000602082840312156125e257600080fd5b81356125ed816125ba565b9392505050565b60008060006060848603121561260957600080fd5b833561261481612579565b925060208401359150604084013561262b81612579565b809150509250925092565b60006020828403121561264857600080fd5b5035919050565b60005b8381101561266a578181015183820152602001612652565b83811115610f6a5750506000910152565b6000815180845261269381602086016020860161264f565b601f01601f19169290920160200192915050565b6020815260006125ed602083018461267b565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156126f6576126f66126ba565b6040525050565b600067ffffffffffffffff821115612717576127176126ba565b5060051b60200190565b600082601f83011261273257600080fd5b8135602061273f826126fd565b60405161274c82826126d0565b83815260059390931b850182019282810191508684111561276c57600080fd5b8286015b848110156127875780358352918301918301612770565b509695505050505050565b600067ffffffffffffffff8211156127ac576127ac6126ba565b50601f01601f191660200190565b600082601f8301126127cb57600080fd5b81356127d681612792565b6040516127e382826126d0565b8281528560208487010111156127f857600080fd5b82602086016020830137600092810160200192909252509392505050565b600080600080600060a0868803121561282e57600080fd5b853561283981612579565b9450602086013561284981612579565b9350604086013567ffffffffffffffff8082111561286657600080fd5b61287289838a01612721565b9450606088013591508082111561288857600080fd5b61289489838a01612721565b935060808801359150808211156128aa57600080fd5b506128b7888289016127ba565b9150509295509295909350565b600080604083850312156128d757600080fd5b823567ffffffffffffffff808211156128ef57600080fd5b818501915085601f83011261290357600080fd5b81356020612910826126fd565b60405161291d82826126d0565b83815260059390931b850182019282810191508984111561293d57600080fd5b948201945b8386101561296457853561295581612579565b82529482019490820190612942565b9650508601359250508082111561297a57600080fd5b5061298785828601612721565b9150509250929050565b600081518084526020808501945080840160005b838110156129c1578151875295820195908201906001016129a5565b509495945050505050565b6020815260006125ed6020830184612991565b60008060008060008060c087890312156129f857600080fd5b863567ffffffffffffffff80821115612a1057600080fd5b612a1c8a838b016127ba565b9750602089013596506040890135955060608901359150612a3c82612579565b90935060808801359080821115612a5257600080fd5b612a5e8a838b016127ba565b935060a0890135915080821115612a7457600080fd5b50612a8189828a016127ba565b9150509295509295509295565b80151581146112c557600080fd5b60008060408385031215612aaf57600080fd5b8235612aba81612579565b91506020830135612aca81612a8e565b809150509250929050565b608081526000612ae8608083018761267b565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b600080600060608486031215612b2257600080fd5b8335925060208401359150604084013561262b81612579565b60008060408385031215612b4e57600080fd5b8235612b5981612579565b91506020830135612aca81612579565b600080600080600060a08688031215612b8157600080fd5b8535612b8c81612579565b94506020860135612b9c81612579565b93506040860135925060608601359150608086013567ffffffffffffffff811115612bc657600080fd5b6128b7888289016127ba565b600060208284031215612be457600080fd5b81356125ed81612579565b600080600060608486031215612c0457600080fd5b833567ffffffffffffffff80821115612c1c57600080fd5b612c2887838801612721565b94506020860135915080821115612c3e57600080fd5b50612c4b86828701612721565b925050604084013561262b81612579565b600082601f830112612c6d57600080fd5b8151612c7881612792565b604051612c8582826126d0565b828152856020848701011115612c9a57600080fd5b612cab83602083016020880161264f565b95945050505050565b600060208284031215612cc657600080fd5b815167ffffffffffffffff811115612cdd57600080fd5b612ce984828501612c5c565b949350505050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b600060208284031215612d5257600080fd5b81516125ed81612a8e565b6020808252601d908201527f50424d3a2027746f27206164647265737320626c61636b6c6973746564000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612dbc57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612df357612df3612dc3565b500290565b60008219821115612e0b57612e0b612dc3565b500190565b6000600019821415612e2457612e24612dc3565b5060010190565b604081526000612e3e6040830185612991565b8281036020840152612cab8185612991565b600060018060a01b038089168352808816602084015260c06040840152612e7a60c0840188612991565b8381036060850152612e8c8188612991565b959091166080840152505060a00152949350505050565b60e081526000612eb660e083018a61267b565b60208301899052604083018890526001600160a01b03871660608401528281036080840152612ee5818761267b565b905082810360a0840152612ef9818661267b565b9150508260c083015298975050505050505050565b60008060008060808587031215612f2457600080fd5b845167ffffffffffffffff811115612f3b57600080fd5b612f4787828801612c5c565b94505060208501519250604085015191506060850151612f6681612579565b939692955090935050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6000825161305281846020870161264f565b9190910192915050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061315890830186612991565b828103606084015261316a8186612991565b9050828103608084015261317e818561267b565b98975050505050505050565b60006020828403121561319c57600080fd5b81516125ed816125ba565b600060033d11156131c05760046000803e5060005160e01c5b90565b600060443d10156131d15790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561320157505050505090565b82850191508151818111156132195750505050505090565b843d87010160208285010111156132335750505050505090565b613242602082860101876126d0565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906132cf9083018461267b565b97965050505050505056fea2646970667358221220bbb4a717b2cb9a6e385efc470d52d532f7e58007f6780209dc37a29e040b188464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "batchMint(uint256[],uint256[],address)": {
        "details": "See {IPBM-batchMint}.      IMPT: Before minting, the caller should approve the contract address to spend ERC-20 tokens on behalf of the caller.       This can be done by calling the `approve` or `increaseMinterAllowance` functions of the ERC-20 contract and specifying `_spender` to be the PBM contract address.  Ref : https://eips.ethereum.org/EIPS/eip-20 WARNING: Any contracts that externally call these mint() and batchMint() functions should implement some sort of reentrancy guard procedure (such as OpenZeppelin's ReentrancyGuard). Requirements: - contract must not be paused - tokens must not be expired - `tokenIds` should all be valid ids that have already been created - `tokenIds` and `amounts` list need to have the same number of values - caller should have the necessary amount of the ERC-20 tokens required to mint - caller should have approved the PBM contract to spend the ERC-20 tokens - receiver should not be blacklisted"
      },
      "createPBMTokenType(string,uint256,uint256,address,string,string)": {
        "details": "See {IPBM-createPBMTokenType}. Requirements: - caller must be owner - contract must not be expired - `tokenExpiry` must be less than contract expiry - `amount` should not be 0"
      },
      "getTokenDetails(uint256)": {
        "details": "See {IPBM-getTokenDetails}."
      },
      "initialise(address,uint256,address)": {
        "params": {
          "_expiry": "contract wide expiry ( in epoch )",
          "_pbmAddressList": "address of the PBMAddressList smartcontract",
          "_spotToken": "address of the underlying ERC20 token"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(uint256,uint256,address)": {
        "details": "See {IPBM-mint}.      IMPT: Before minting, the caller should approve the contract address to spend ERC-20 tokens on behalf of the caller.       This can be done by calling the `approve` or `increaseMinterAllowance` functions of the ERC-20 contract and specifying `_spender` to be the PBM contract address.  Ref : https://eips.ethereum.org/EIPS/eip-20 WARNING: Any contracts that externally call these mint() and batchMint() functions should implement some sort of reentrancy guard procedure (such as OpenZeppelin's ReentrancyGuard). Requirements: - contract must not be paused - tokens must not be expired - `tokenId` should be a valid id that has already been created - caller should have the necessary amount of the ERC-20 tokens required to mint - caller should have approved the PBM contract to spend the ERC-20 tokens - receiver should not be blacklisted"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "see {Pausable _pause} Requirements : - caller should be owner"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revokePBM(uint256)": {
        "details": "See {IPBM-revokePBM}. Requirements: - `tokenId` should be a valid ids that has already been created - caller must be the creator of the tokenType - token must be expired"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IPBM-safeBatchTransferFrom}. Requirements: - contract must not be paused - tokens must not be expired - `tokenIds` should all be  valid ids that has already been created - `tokenIds` and `amounts` list need to have the same number of values - caller should have the PBMs that are being transferred (or)          caller should have the approval to spend the PBMs on behalf of the owner (`from` addresss)"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IPBM-safeTransferFrom}. Requirements: - contract must not be paused - tokens must not be expired - `tokenId` should be a valid ids that has already been created - caller should have the PBMs that are being transferred (or)          caller should have the approval to spend the PBMs on behalf of the owner (`from` addresss)"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "see {Pausable _unpause} Requirements : - caller should be owner"
      },
      "uri(uint256)": {
        "details": "See {IPBM-uri}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MerchantPayment(address,address,uint256[],uint256[],address,uint256)": {
        "notice": "Emitted when underlying ERC-20 tokens are transferred to a whitelisted merchant ( payment )"
      },
      "PBMrevokeWithdraw(address,uint256,address,uint256)": {
        "notice": "Emitted when a PBM type creator withdraws the underlying ERC-20 tokens from all the remaining expired PBMs"
      }
    },
    "kind": "user",
    "methods": {
      "initialise(address,uint256,address)": {
        "notice": "sets the address of the underlying ERC20 token, Contract Expiry, and the address of pbm address list"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 249,
        "contract": "contracts/PBM.sol:PBM",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 255,
        "contract": "contracts/PBM.sol:PBM",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 257,
        "contract": "contracts/PBM.sol:PBM",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/PBM.sol:PBM",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 133,
        "contract": "contracts/PBM.sol:PBM",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4477,
        "contract": "contracts/PBM.sol:PBM",
        "label": "spotToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4483,
        "contract": "contracts/PBM.sol:PBM",
        "label": "pbmTokenManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4489,
        "contract": "contracts/PBM.sol:PBM",
        "label": "pbmAddressList",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4492,
        "contract": "contracts/PBM.sol:PBM",
        "label": "initialised",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 4494,
        "contract": "contracts/PBM.sol:PBM",
        "label": "contractExpiry",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}