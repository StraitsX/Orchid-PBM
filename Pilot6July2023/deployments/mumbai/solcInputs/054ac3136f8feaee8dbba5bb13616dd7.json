{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/IPBMAddressList.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title PBM Address list Interface.\n/// @notice The PBM address list stores and manages whitelisted merchants and blacklisted address for the PBMs\ninterface IPBMAddressList {\n    /// @notice Adds wallet addresses to the blacklist who are unable to receive the pbm tokens.\n    /// @param addresses The list of merchant wallet address\n    /// @param metadata any comments on the addresses being added\n    function blacklistAddresses(address[] memory addresses, string memory metadata) external;\n\n    /// @notice Removes wallet addresses from the blacklist who are  unable to receive the PBM tokens.\n    /// @param addresses The list of merchant wallet address\n    /// @param metadata any comments on the addresses being added\n    function unBlacklistAddresses(address[] memory addresses, string memory metadata) external;\n\n    /// @notice Checks if the address is one of the blacklisted addresses\n    /// @param _address The address in query\n    /// @return True if address is a blacklisted, else false\n    function isBlacklisted(address _address) external returns (bool);\n\n    /// @notice Adds wallet addresses of merchants who are the only wallets able to receive the underlying ERC-20 tokens (whitelisting).\n    /// @param addresses The list of merchant wallet address\n    /// @param metadata any comments on the addresses being added\n    function addMerchantAddresses(address[] memory addresses, string memory metadata) external;\n\n    /// @notice Removes wallet addresses from the merchant addresses who are  able to receive the underlying ERC-20 tokens (un-whitelisting).\n    /// @param addresses The list of merchant wallet address\n    /// @param metadata any comments on the addresses being added\n    function removeMerchantAddresses(address[] memory addresses, string memory metadata) external;\n\n    /// @notice Checks if the address is one of the whitelisted merchant\n    /// @param _address The address in query\n    /// @return True if address is a merchant, else false\n    function isMerchant(address _address) external returns (bool);\n\n    /// @notice Adds wallet addresses of merchants who are hero merchants.\n    /// @param addresses The list of hero merchant wallet address\n    /// @param token_ids The list of heroNFT token_id\n    function addHeroMerchant(address[] memory addresses, uint256[] memory token_ids) external;\n\n    /// @notice Removes wallet addresses of merchants who are hero merchants.\n    /// @param addresses The list of hero merchant wallet address\n    function removeHeroMerchant(address[] memory addresses) external;\n\n    /// @notice Get the heroNFT token_id\n    /// @param _address The address in query\n    /// @return 0 if not a hero merchant, else the heroNFT token_id\n    function getHeroNFTId(address _address) external returns (uint256);\n\n    /// @notice Event emitted when the Merchant List is edited\n    /// @param action Tags \"add\" or \"remove\" for action type\n    /// @param addresses The list of merchant wallet address\n    /// @param metadata any comments on the addresses being added\n    event MerchantList(string action, address[] addresses, string metadata);\n\n    /// @notice Event emitted when the Blacklist is edited\n    /// @param action Tags \"add\" or \"remove\" for action type\n    /// @param addresses The list of merchant wallet address\n    /// @param metadata any comments on the addresses being added\n    event Blacklist(string action, address[] addresses, string metadata);\n}\n"
    },
    "contracts/PBMAddressList.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./IPBMAddressList.sol\";\n\ncontract PBMAddressList is Ownable, IPBMAddressList {\n    // list of merchants who are able to receive the underlying ERC-20 tokens\n    mapping(address => bool) internal merchantList;\n    // list of merchants who are unable to receive the PBM tokens\n    mapping(address => bool) internal blacklistedAddresses;\n    // mapping of hero merchant address to hero nft id\n    mapping(address => uint256) internal heroNFTId;\n\n    /**\n     * @dev See {IPBMAddressList-blacklistAddresses}.\n     *\n     * Requirements:\n     *\n     * - caller must be owner\n     */\n    function blacklistAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            blacklistedAddresses[addresses[i]] = true;\n        }\n        emit Blacklist(\"add\", addresses, metadata);\n    }\n\n    /**\n     * @dev See {IPBMAddressList-unBlacklistAddresses}.\n     *\n     * Requirements:\n     *\n     * - caller must be owner\n     */\n    function unBlacklistAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            blacklistedAddresses[addresses[i]] = false;\n        }\n        emit Blacklist(\"remove\", addresses, metadata);\n    }\n\n    /**\n     * @dev See {IPBMAddressList-isBlacklisted}.\n     *\n     */\n    function isBlacklisted(address _address) external view override returns (bool) {\n        return blacklistedAddresses[_address];\n    }\n\n    /**\n     * @dev See {IPBMAddressList-addMerchantAddresses}.\n     *\n     * Requirements:\n     *\n     * - caller must be owner\n     */\n    function addMerchantAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            merchantList[addresses[i]] = true;\n        }\n        emit MerchantList(\"add\", addresses, metadata);\n    }\n\n    /**\n     * @dev See {IPBMAddressList-removeMerchantAddresses}.\n     *\n     * Requirements:\n     *\n     * - caller must be owner\n     */\n    function removeMerchantAddresses(address[] memory addresses, string memory metadata) external override onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            merchantList[addresses[i]] = false;\n        }\n        emit MerchantList(\"remove\", addresses, metadata);\n    }\n\n    /**\n     * @dev See {IPBMAddressList-isMerchant}.\n     *\n     */\n    function isMerchant(address _address) external view override returns (bool) {\n        return merchantList[_address];\n    }\n\n    /**\n     * @dev See {IPBMAddressList-addHeroMerchant}.\n     *\n     * Requirements:\n     *\n     * - caller must be owner\n     */\n    function addHeroMerchant(address[] memory addresses, uint256[] memory token_ids) external override onlyOwner {\n        require(addresses.length == token_ids.length, \"PBMAddressList: addresses and token_ids length mismatch\");\n        for (uint256 i = 0; i < addresses.length; i++) {\n            require(token_ids[i] != 0, \"PBMAddressList: heroNFT token_id cannot be 0\");\n            heroNFTId[addresses[i]] = token_ids[i];\n        }\n    }\n\n    /**\n     * @dev See {IPBMAddressList-removeHeroMerchant}.\n     *\n     * Requirements:\n     *\n     * - caller must be owner\n     */\n    function removeHeroMerchant(address[] memory addresses) external override onlyOwner {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            heroNFTId[addresses[i]] = 0;\n        }\n    }\n\n    /**\n     * @dev See {IPBMAddressList-getHeroNFTId}.\n     *\n     */\n    function getHeroNFTId(address _address) external view override returns (uint256) {\n        return heroNFTId[_address];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}